/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClusterState implements org.apache.thrift.TBase<ClusterState, ClusterState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClusterState");

  private static final org.apache.thrift.protocol.TField CURRLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("currload", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CMACHINES_FIELD_DESC = new org.apache.thrift.protocol.TField("cmachines", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CQUES_FIELD_DESC = new org.apache.thrift.protocol.TField("cques", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CSVRS_FIELD_DESC = new org.apache.thrift.protocol.TField("csvrs", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CSVCS_FIELD_DESC = new org.apache.thrift.protocol.TField("csvcs", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CSGT_FIELD_DESC = new org.apache.thrift.protocol.TField("csgt", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CACCSRS_FIELD_DESC = new org.apache.thrift.protocol.TField("caccsrs", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAXMACHINES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxmachines", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MAXQUES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxques", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MAXSVRS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxsvrs", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MAXSVCS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxsvcs", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MAXSGT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxsgt", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MAXACCSRS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxaccsrs", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField WKINITIATED_FIELD_DESC = new org.apache.thrift.protocol.TField("wkinitiated", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WKCOMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("wkcompleted", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField RREQMADE_FIELD_DESC = new org.apache.thrift.protocol.TField("rreqmade", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClusterStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClusterStateTupleSchemeFactory());
  }

  public long currload; // required
  public int cmachines; // required
  public int cques; // required
  public int csvrs; // required
  public int csvcs; // required
  public int csgt; // required
  public int caccsrs; // required
  public int maxmachines; // required
  public int maxques; // required
  public int maxsvrs; // required
  public int maxsvcs; // required
  public int maxsgt; // required
  public int maxaccsrs; // required
  public int wkinitiated; // required
  public int wkcompleted; // required
  public int rreqmade; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRLOAD((short)1, "currload"),
    CMACHINES((short)2, "cmachines"),
    CQUES((short)3, "cques"),
    CSVRS((short)4, "csvrs"),
    CSVCS((short)5, "csvcs"),
    CSGT((short)6, "csgt"),
    CACCSRS((short)7, "caccsrs"),
    MAXMACHINES((short)8, "maxmachines"),
    MAXQUES((short)9, "maxques"),
    MAXSVRS((short)10, "maxsvrs"),
    MAXSVCS((short)11, "maxsvcs"),
    MAXSGT((short)12, "maxsgt"),
    MAXACCSRS((short)13, "maxaccsrs"),
    WKINITIATED((short)14, "wkinitiated"),
    WKCOMPLETED((short)15, "wkcompleted"),
    RREQMADE((short)16, "rreqmade");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRLOAD
          return CURRLOAD;
        case 2: // CMACHINES
          return CMACHINES;
        case 3: // CQUES
          return CQUES;
        case 4: // CSVRS
          return CSVRS;
        case 5: // CSVCS
          return CSVCS;
        case 6: // CSGT
          return CSGT;
        case 7: // CACCSRS
          return CACCSRS;
        case 8: // MAXMACHINES
          return MAXMACHINES;
        case 9: // MAXQUES
          return MAXQUES;
        case 10: // MAXSVRS
          return MAXSVRS;
        case 11: // MAXSVCS
          return MAXSVCS;
        case 12: // MAXSGT
          return MAXSGT;
        case 13: // MAXACCSRS
          return MAXACCSRS;
        case 14: // WKINITIATED
          return WKINITIATED;
        case 15: // WKCOMPLETED
          return WKCOMPLETED;
        case 16: // RREQMADE
          return RREQMADE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRLOAD_ISSET_ID = 0;
  private static final int __CMACHINES_ISSET_ID = 1;
  private static final int __CQUES_ISSET_ID = 2;
  private static final int __CSVRS_ISSET_ID = 3;
  private static final int __CSVCS_ISSET_ID = 4;
  private static final int __CSGT_ISSET_ID = 5;
  private static final int __CACCSRS_ISSET_ID = 6;
  private static final int __MAXMACHINES_ISSET_ID = 7;
  private static final int __MAXQUES_ISSET_ID = 8;
  private static final int __MAXSVRS_ISSET_ID = 9;
  private static final int __MAXSVCS_ISSET_ID = 10;
  private static final int __MAXSGT_ISSET_ID = 11;
  private static final int __MAXACCSRS_ISSET_ID = 12;
  private static final int __WKINITIATED_ISSET_ID = 13;
  private static final int __WKCOMPLETED_ISSET_ID = 14;
  private static final int __RREQMADE_ISSET_ID = 15;
  private BitSet __isset_bit_vector = new BitSet(16);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRLOAD, new org.apache.thrift.meta_data.FieldMetaData("currload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CMACHINES, new org.apache.thrift.meta_data.FieldMetaData("cmachines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CQUES, new org.apache.thrift.meta_data.FieldMetaData("cques", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CSVRS, new org.apache.thrift.meta_data.FieldMetaData("csvrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CSVCS, new org.apache.thrift.meta_data.FieldMetaData("csvcs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CSGT, new org.apache.thrift.meta_data.FieldMetaData("csgt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CACCSRS, new org.apache.thrift.meta_data.FieldMetaData("caccsrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXMACHINES, new org.apache.thrift.meta_data.FieldMetaData("maxmachines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXQUES, new org.apache.thrift.meta_data.FieldMetaData("maxques", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXSVRS, new org.apache.thrift.meta_data.FieldMetaData("maxsvrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXSVCS, new org.apache.thrift.meta_data.FieldMetaData("maxsvcs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXSGT, new org.apache.thrift.meta_data.FieldMetaData("maxsgt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXACCSRS, new org.apache.thrift.meta_data.FieldMetaData("maxaccsrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WKINITIATED, new org.apache.thrift.meta_data.FieldMetaData("wkinitiated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WKCOMPLETED, new org.apache.thrift.meta_data.FieldMetaData("wkcompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RREQMADE, new org.apache.thrift.meta_data.FieldMetaData("rreqmade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClusterState.class, metaDataMap);
  }

  public ClusterState() {
  }

  public ClusterState(
    long currload,
    int cmachines,
    int cques,
    int csvrs,
    int csvcs,
    int csgt,
    int caccsrs,
    int maxmachines,
    int maxques,
    int maxsvrs,
    int maxsvcs,
    int maxsgt,
    int maxaccsrs,
    int wkinitiated,
    int wkcompleted,
    int rreqmade)
  {
    this();
    this.currload = currload;
    setCurrloadIsSet(true);
    this.cmachines = cmachines;
    setCmachinesIsSet(true);
    this.cques = cques;
    setCquesIsSet(true);
    this.csvrs = csvrs;
    setCsvrsIsSet(true);
    this.csvcs = csvcs;
    setCsvcsIsSet(true);
    this.csgt = csgt;
    setCsgtIsSet(true);
    this.caccsrs = caccsrs;
    setCaccsrsIsSet(true);
    this.maxmachines = maxmachines;
    setMaxmachinesIsSet(true);
    this.maxques = maxques;
    setMaxquesIsSet(true);
    this.maxsvrs = maxsvrs;
    setMaxsvrsIsSet(true);
    this.maxsvcs = maxsvcs;
    setMaxsvcsIsSet(true);
    this.maxsgt = maxsgt;
    setMaxsgtIsSet(true);
    this.maxaccsrs = maxaccsrs;
    setMaxaccsrsIsSet(true);
    this.wkinitiated = wkinitiated;
    setWkinitiatedIsSet(true);
    this.wkcompleted = wkcompleted;
    setWkcompletedIsSet(true);
    this.rreqmade = rreqmade;
    setRreqmadeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClusterState(ClusterState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.currload = other.currload;
    this.cmachines = other.cmachines;
    this.cques = other.cques;
    this.csvrs = other.csvrs;
    this.csvcs = other.csvcs;
    this.csgt = other.csgt;
    this.caccsrs = other.caccsrs;
    this.maxmachines = other.maxmachines;
    this.maxques = other.maxques;
    this.maxsvrs = other.maxsvrs;
    this.maxsvcs = other.maxsvcs;
    this.maxsgt = other.maxsgt;
    this.maxaccsrs = other.maxaccsrs;
    this.wkinitiated = other.wkinitiated;
    this.wkcompleted = other.wkcompleted;
    this.rreqmade = other.rreqmade;
  }

  public ClusterState deepCopy() {
    return new ClusterState(this);
  }

  @Override
  public void clear() {
    setCurrloadIsSet(false);
    this.currload = 0;
    setCmachinesIsSet(false);
    this.cmachines = 0;
    setCquesIsSet(false);
    this.cques = 0;
    setCsvrsIsSet(false);
    this.csvrs = 0;
    setCsvcsIsSet(false);
    this.csvcs = 0;
    setCsgtIsSet(false);
    this.csgt = 0;
    setCaccsrsIsSet(false);
    this.caccsrs = 0;
    setMaxmachinesIsSet(false);
    this.maxmachines = 0;
    setMaxquesIsSet(false);
    this.maxques = 0;
    setMaxsvrsIsSet(false);
    this.maxsvrs = 0;
    setMaxsvcsIsSet(false);
    this.maxsvcs = 0;
    setMaxsgtIsSet(false);
    this.maxsgt = 0;
    setMaxaccsrsIsSet(false);
    this.maxaccsrs = 0;
    setWkinitiatedIsSet(false);
    this.wkinitiated = 0;
    setWkcompletedIsSet(false);
    this.wkcompleted = 0;
    setRreqmadeIsSet(false);
    this.rreqmade = 0;
  }

  public long getCurrload() {
    return this.currload;
  }

  public ClusterState setCurrload(long currload) {
    this.currload = currload;
    setCurrloadIsSet(true);
    return this;
  }

  public void unsetCurrload() {
    __isset_bit_vector.clear(__CURRLOAD_ISSET_ID);
  }

  /** Returns true if field currload is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrload() {
    return __isset_bit_vector.get(__CURRLOAD_ISSET_ID);
  }

  public void setCurrloadIsSet(boolean value) {
    __isset_bit_vector.set(__CURRLOAD_ISSET_ID, value);
  }

  public int getCmachines() {
    return this.cmachines;
  }

  public ClusterState setCmachines(int cmachines) {
    this.cmachines = cmachines;
    setCmachinesIsSet(true);
    return this;
  }

  public void unsetCmachines() {
    __isset_bit_vector.clear(__CMACHINES_ISSET_ID);
  }

  /** Returns true if field cmachines is set (has been assigned a value) and false otherwise */
  public boolean isSetCmachines() {
    return __isset_bit_vector.get(__CMACHINES_ISSET_ID);
  }

  public void setCmachinesIsSet(boolean value) {
    __isset_bit_vector.set(__CMACHINES_ISSET_ID, value);
  }

  public int getCques() {
    return this.cques;
  }

  public ClusterState setCques(int cques) {
    this.cques = cques;
    setCquesIsSet(true);
    return this;
  }

  public void unsetCques() {
    __isset_bit_vector.clear(__CQUES_ISSET_ID);
  }

  /** Returns true if field cques is set (has been assigned a value) and false otherwise */
  public boolean isSetCques() {
    return __isset_bit_vector.get(__CQUES_ISSET_ID);
  }

  public void setCquesIsSet(boolean value) {
    __isset_bit_vector.set(__CQUES_ISSET_ID, value);
  }

  public int getCsvrs() {
    return this.csvrs;
  }

  public ClusterState setCsvrs(int csvrs) {
    this.csvrs = csvrs;
    setCsvrsIsSet(true);
    return this;
  }

  public void unsetCsvrs() {
    __isset_bit_vector.clear(__CSVRS_ISSET_ID);
  }

  /** Returns true if field csvrs is set (has been assigned a value) and false otherwise */
  public boolean isSetCsvrs() {
    return __isset_bit_vector.get(__CSVRS_ISSET_ID);
  }

  public void setCsvrsIsSet(boolean value) {
    __isset_bit_vector.set(__CSVRS_ISSET_ID, value);
  }

  public int getCsvcs() {
    return this.csvcs;
  }

  public ClusterState setCsvcs(int csvcs) {
    this.csvcs = csvcs;
    setCsvcsIsSet(true);
    return this;
  }

  public void unsetCsvcs() {
    __isset_bit_vector.clear(__CSVCS_ISSET_ID);
  }

  /** Returns true if field csvcs is set (has been assigned a value) and false otherwise */
  public boolean isSetCsvcs() {
    return __isset_bit_vector.get(__CSVCS_ISSET_ID);
  }

  public void setCsvcsIsSet(boolean value) {
    __isset_bit_vector.set(__CSVCS_ISSET_ID, value);
  }

  public int getCsgt() {
    return this.csgt;
  }

  public ClusterState setCsgt(int csgt) {
    this.csgt = csgt;
    setCsgtIsSet(true);
    return this;
  }

  public void unsetCsgt() {
    __isset_bit_vector.clear(__CSGT_ISSET_ID);
  }

  /** Returns true if field csgt is set (has been assigned a value) and false otherwise */
  public boolean isSetCsgt() {
    return __isset_bit_vector.get(__CSGT_ISSET_ID);
  }

  public void setCsgtIsSet(boolean value) {
    __isset_bit_vector.set(__CSGT_ISSET_ID, value);
  }

  public int getCaccsrs() {
    return this.caccsrs;
  }

  public ClusterState setCaccsrs(int caccsrs) {
    this.caccsrs = caccsrs;
    setCaccsrsIsSet(true);
    return this;
  }

  public void unsetCaccsrs() {
    __isset_bit_vector.clear(__CACCSRS_ISSET_ID);
  }

  /** Returns true if field caccsrs is set (has been assigned a value) and false otherwise */
  public boolean isSetCaccsrs() {
    return __isset_bit_vector.get(__CACCSRS_ISSET_ID);
  }

  public void setCaccsrsIsSet(boolean value) {
    __isset_bit_vector.set(__CACCSRS_ISSET_ID, value);
  }

  public int getMaxmachines() {
    return this.maxmachines;
  }

  public ClusterState setMaxmachines(int maxmachines) {
    this.maxmachines = maxmachines;
    setMaxmachinesIsSet(true);
    return this;
  }

  public void unsetMaxmachines() {
    __isset_bit_vector.clear(__MAXMACHINES_ISSET_ID);
  }

  /** Returns true if field maxmachines is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxmachines() {
    return __isset_bit_vector.get(__MAXMACHINES_ISSET_ID);
  }

  public void setMaxmachinesIsSet(boolean value) {
    __isset_bit_vector.set(__MAXMACHINES_ISSET_ID, value);
  }

  public int getMaxques() {
    return this.maxques;
  }

  public ClusterState setMaxques(int maxques) {
    this.maxques = maxques;
    setMaxquesIsSet(true);
    return this;
  }

  public void unsetMaxques() {
    __isset_bit_vector.clear(__MAXQUES_ISSET_ID);
  }

  /** Returns true if field maxques is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxques() {
    return __isset_bit_vector.get(__MAXQUES_ISSET_ID);
  }

  public void setMaxquesIsSet(boolean value) {
    __isset_bit_vector.set(__MAXQUES_ISSET_ID, value);
  }

  public int getMaxsvrs() {
    return this.maxsvrs;
  }

  public ClusterState setMaxsvrs(int maxsvrs) {
    this.maxsvrs = maxsvrs;
    setMaxsvrsIsSet(true);
    return this;
  }

  public void unsetMaxsvrs() {
    __isset_bit_vector.clear(__MAXSVRS_ISSET_ID);
  }

  /** Returns true if field maxsvrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxsvrs() {
    return __isset_bit_vector.get(__MAXSVRS_ISSET_ID);
  }

  public void setMaxsvrsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXSVRS_ISSET_ID, value);
  }

  public int getMaxsvcs() {
    return this.maxsvcs;
  }

  public ClusterState setMaxsvcs(int maxsvcs) {
    this.maxsvcs = maxsvcs;
    setMaxsvcsIsSet(true);
    return this;
  }

  public void unsetMaxsvcs() {
    __isset_bit_vector.clear(__MAXSVCS_ISSET_ID);
  }

  /** Returns true if field maxsvcs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxsvcs() {
    return __isset_bit_vector.get(__MAXSVCS_ISSET_ID);
  }

  public void setMaxsvcsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXSVCS_ISSET_ID, value);
  }

  public int getMaxsgt() {
    return this.maxsgt;
  }

  public ClusterState setMaxsgt(int maxsgt) {
    this.maxsgt = maxsgt;
    setMaxsgtIsSet(true);
    return this;
  }

  public void unsetMaxsgt() {
    __isset_bit_vector.clear(__MAXSGT_ISSET_ID);
  }

  /** Returns true if field maxsgt is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxsgt() {
    return __isset_bit_vector.get(__MAXSGT_ISSET_ID);
  }

  public void setMaxsgtIsSet(boolean value) {
    __isset_bit_vector.set(__MAXSGT_ISSET_ID, value);
  }

  public int getMaxaccsrs() {
    return this.maxaccsrs;
  }

  public ClusterState setMaxaccsrs(int maxaccsrs) {
    this.maxaccsrs = maxaccsrs;
    setMaxaccsrsIsSet(true);
    return this;
  }

  public void unsetMaxaccsrs() {
    __isset_bit_vector.clear(__MAXACCSRS_ISSET_ID);
  }

  /** Returns true if field maxaccsrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxaccsrs() {
    return __isset_bit_vector.get(__MAXACCSRS_ISSET_ID);
  }

  public void setMaxaccsrsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXACCSRS_ISSET_ID, value);
  }

  public int getWkinitiated() {
    return this.wkinitiated;
  }

  public ClusterState setWkinitiated(int wkinitiated) {
    this.wkinitiated = wkinitiated;
    setWkinitiatedIsSet(true);
    return this;
  }

  public void unsetWkinitiated() {
    __isset_bit_vector.clear(__WKINITIATED_ISSET_ID);
  }

  /** Returns true if field wkinitiated is set (has been assigned a value) and false otherwise */
  public boolean isSetWkinitiated() {
    return __isset_bit_vector.get(__WKINITIATED_ISSET_ID);
  }

  public void setWkinitiatedIsSet(boolean value) {
    __isset_bit_vector.set(__WKINITIATED_ISSET_ID, value);
  }

  public int getWkcompleted() {
    return this.wkcompleted;
  }

  public ClusterState setWkcompleted(int wkcompleted) {
    this.wkcompleted = wkcompleted;
    setWkcompletedIsSet(true);
    return this;
  }

  public void unsetWkcompleted() {
    __isset_bit_vector.clear(__WKCOMPLETED_ISSET_ID);
  }

  /** Returns true if field wkcompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetWkcompleted() {
    return __isset_bit_vector.get(__WKCOMPLETED_ISSET_ID);
  }

  public void setWkcompletedIsSet(boolean value) {
    __isset_bit_vector.set(__WKCOMPLETED_ISSET_ID, value);
  }

  public int getRreqmade() {
    return this.rreqmade;
  }

  public ClusterState setRreqmade(int rreqmade) {
    this.rreqmade = rreqmade;
    setRreqmadeIsSet(true);
    return this;
  }

  public void unsetRreqmade() {
    __isset_bit_vector.clear(__RREQMADE_ISSET_ID);
  }

  /** Returns true if field rreqmade is set (has been assigned a value) and false otherwise */
  public boolean isSetRreqmade() {
    return __isset_bit_vector.get(__RREQMADE_ISSET_ID);
  }

  public void setRreqmadeIsSet(boolean value) {
    __isset_bit_vector.set(__RREQMADE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRLOAD:
      if (value == null) {
        unsetCurrload();
      } else {
        setCurrload((Long)value);
      }
      break;

    case CMACHINES:
      if (value == null) {
        unsetCmachines();
      } else {
        setCmachines((Integer)value);
      }
      break;

    case CQUES:
      if (value == null) {
        unsetCques();
      } else {
        setCques((Integer)value);
      }
      break;

    case CSVRS:
      if (value == null) {
        unsetCsvrs();
      } else {
        setCsvrs((Integer)value);
      }
      break;

    case CSVCS:
      if (value == null) {
        unsetCsvcs();
      } else {
        setCsvcs((Integer)value);
      }
      break;

    case CSGT:
      if (value == null) {
        unsetCsgt();
      } else {
        setCsgt((Integer)value);
      }
      break;

    case CACCSRS:
      if (value == null) {
        unsetCaccsrs();
      } else {
        setCaccsrs((Integer)value);
      }
      break;

    case MAXMACHINES:
      if (value == null) {
        unsetMaxmachines();
      } else {
        setMaxmachines((Integer)value);
      }
      break;

    case MAXQUES:
      if (value == null) {
        unsetMaxques();
      } else {
        setMaxques((Integer)value);
      }
      break;

    case MAXSVRS:
      if (value == null) {
        unsetMaxsvrs();
      } else {
        setMaxsvrs((Integer)value);
      }
      break;

    case MAXSVCS:
      if (value == null) {
        unsetMaxsvcs();
      } else {
        setMaxsvcs((Integer)value);
      }
      break;

    case MAXSGT:
      if (value == null) {
        unsetMaxsgt();
      } else {
        setMaxsgt((Integer)value);
      }
      break;

    case MAXACCSRS:
      if (value == null) {
        unsetMaxaccsrs();
      } else {
        setMaxaccsrs((Integer)value);
      }
      break;

    case WKINITIATED:
      if (value == null) {
        unsetWkinitiated();
      } else {
        setWkinitiated((Integer)value);
      }
      break;

    case WKCOMPLETED:
      if (value == null) {
        unsetWkcompleted();
      } else {
        setWkcompleted((Integer)value);
      }
      break;

    case RREQMADE:
      if (value == null) {
        unsetRreqmade();
      } else {
        setRreqmade((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRLOAD:
      return Long.valueOf(getCurrload());

    case CMACHINES:
      return Integer.valueOf(getCmachines());

    case CQUES:
      return Integer.valueOf(getCques());

    case CSVRS:
      return Integer.valueOf(getCsvrs());

    case CSVCS:
      return Integer.valueOf(getCsvcs());

    case CSGT:
      return Integer.valueOf(getCsgt());

    case CACCSRS:
      return Integer.valueOf(getCaccsrs());

    case MAXMACHINES:
      return Integer.valueOf(getMaxmachines());

    case MAXQUES:
      return Integer.valueOf(getMaxques());

    case MAXSVRS:
      return Integer.valueOf(getMaxsvrs());

    case MAXSVCS:
      return Integer.valueOf(getMaxsvcs());

    case MAXSGT:
      return Integer.valueOf(getMaxsgt());

    case MAXACCSRS:
      return Integer.valueOf(getMaxaccsrs());

    case WKINITIATED:
      return Integer.valueOf(getWkinitiated());

    case WKCOMPLETED:
      return Integer.valueOf(getWkcompleted());

    case RREQMADE:
      return Integer.valueOf(getRreqmade());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRLOAD:
      return isSetCurrload();
    case CMACHINES:
      return isSetCmachines();
    case CQUES:
      return isSetCques();
    case CSVRS:
      return isSetCsvrs();
    case CSVCS:
      return isSetCsvcs();
    case CSGT:
      return isSetCsgt();
    case CACCSRS:
      return isSetCaccsrs();
    case MAXMACHINES:
      return isSetMaxmachines();
    case MAXQUES:
      return isSetMaxques();
    case MAXSVRS:
      return isSetMaxsvrs();
    case MAXSVCS:
      return isSetMaxsvcs();
    case MAXSGT:
      return isSetMaxsgt();
    case MAXACCSRS:
      return isSetMaxaccsrs();
    case WKINITIATED:
      return isSetWkinitiated();
    case WKCOMPLETED:
      return isSetWkcompleted();
    case RREQMADE:
      return isSetRreqmade();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClusterState)
      return this.equals((ClusterState)that);
    return false;
  }

  public boolean equals(ClusterState that) {
    if (that == null)
      return false;

    boolean this_present_currload = true;
    boolean that_present_currload = true;
    if (this_present_currload || that_present_currload) {
      if (!(this_present_currload && that_present_currload))
        return false;
      if (this.currload != that.currload)
        return false;
    }

    boolean this_present_cmachines = true;
    boolean that_present_cmachines = true;
    if (this_present_cmachines || that_present_cmachines) {
      if (!(this_present_cmachines && that_present_cmachines))
        return false;
      if (this.cmachines != that.cmachines)
        return false;
    }

    boolean this_present_cques = true;
    boolean that_present_cques = true;
    if (this_present_cques || that_present_cques) {
      if (!(this_present_cques && that_present_cques))
        return false;
      if (this.cques != that.cques)
        return false;
    }

    boolean this_present_csvrs = true;
    boolean that_present_csvrs = true;
    if (this_present_csvrs || that_present_csvrs) {
      if (!(this_present_csvrs && that_present_csvrs))
        return false;
      if (this.csvrs != that.csvrs)
        return false;
    }

    boolean this_present_csvcs = true;
    boolean that_present_csvcs = true;
    if (this_present_csvcs || that_present_csvcs) {
      if (!(this_present_csvcs && that_present_csvcs))
        return false;
      if (this.csvcs != that.csvcs)
        return false;
    }

    boolean this_present_csgt = true;
    boolean that_present_csgt = true;
    if (this_present_csgt || that_present_csgt) {
      if (!(this_present_csgt && that_present_csgt))
        return false;
      if (this.csgt != that.csgt)
        return false;
    }

    boolean this_present_caccsrs = true;
    boolean that_present_caccsrs = true;
    if (this_present_caccsrs || that_present_caccsrs) {
      if (!(this_present_caccsrs && that_present_caccsrs))
        return false;
      if (this.caccsrs != that.caccsrs)
        return false;
    }

    boolean this_present_maxmachines = true;
    boolean that_present_maxmachines = true;
    if (this_present_maxmachines || that_present_maxmachines) {
      if (!(this_present_maxmachines && that_present_maxmachines))
        return false;
      if (this.maxmachines != that.maxmachines)
        return false;
    }

    boolean this_present_maxques = true;
    boolean that_present_maxques = true;
    if (this_present_maxques || that_present_maxques) {
      if (!(this_present_maxques && that_present_maxques))
        return false;
      if (this.maxques != that.maxques)
        return false;
    }

    boolean this_present_maxsvrs = true;
    boolean that_present_maxsvrs = true;
    if (this_present_maxsvrs || that_present_maxsvrs) {
      if (!(this_present_maxsvrs && that_present_maxsvrs))
        return false;
      if (this.maxsvrs != that.maxsvrs)
        return false;
    }

    boolean this_present_maxsvcs = true;
    boolean that_present_maxsvcs = true;
    if (this_present_maxsvcs || that_present_maxsvcs) {
      if (!(this_present_maxsvcs && that_present_maxsvcs))
        return false;
      if (this.maxsvcs != that.maxsvcs)
        return false;
    }

    boolean this_present_maxsgt = true;
    boolean that_present_maxsgt = true;
    if (this_present_maxsgt || that_present_maxsgt) {
      if (!(this_present_maxsgt && that_present_maxsgt))
        return false;
      if (this.maxsgt != that.maxsgt)
        return false;
    }

    boolean this_present_maxaccsrs = true;
    boolean that_present_maxaccsrs = true;
    if (this_present_maxaccsrs || that_present_maxaccsrs) {
      if (!(this_present_maxaccsrs && that_present_maxaccsrs))
        return false;
      if (this.maxaccsrs != that.maxaccsrs)
        return false;
    }

    boolean this_present_wkinitiated = true;
    boolean that_present_wkinitiated = true;
    if (this_present_wkinitiated || that_present_wkinitiated) {
      if (!(this_present_wkinitiated && that_present_wkinitiated))
        return false;
      if (this.wkinitiated != that.wkinitiated)
        return false;
    }

    boolean this_present_wkcompleted = true;
    boolean that_present_wkcompleted = true;
    if (this_present_wkcompleted || that_present_wkcompleted) {
      if (!(this_present_wkcompleted && that_present_wkcompleted))
        return false;
      if (this.wkcompleted != that.wkcompleted)
        return false;
    }

    boolean this_present_rreqmade = true;
    boolean that_present_rreqmade = true;
    if (this_present_rreqmade || that_present_rreqmade) {
      if (!(this_present_rreqmade && that_present_rreqmade))
        return false;
      if (this.rreqmade != that.rreqmade)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ClusterState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ClusterState typedOther = (ClusterState)other;

    lastComparison = Boolean.valueOf(isSetCurrload()).compareTo(typedOther.isSetCurrload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currload, typedOther.currload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmachines()).compareTo(typedOther.isSetCmachines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmachines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmachines, typedOther.cmachines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCques()).compareTo(typedOther.isSetCques());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCques()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cques, typedOther.cques);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsvrs()).compareTo(typedOther.isSetCsvrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsvrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csvrs, typedOther.csvrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsvcs()).compareTo(typedOther.isSetCsvcs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsvcs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csvcs, typedOther.csvcs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsgt()).compareTo(typedOther.isSetCsgt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsgt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csgt, typedOther.csgt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaccsrs()).compareTo(typedOther.isSetCaccsrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaccsrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caccsrs, typedOther.caccsrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxmachines()).compareTo(typedOther.isSetMaxmachines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxmachines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxmachines, typedOther.maxmachines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxques()).compareTo(typedOther.isSetMaxques());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxques()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxques, typedOther.maxques);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxsvrs()).compareTo(typedOther.isSetMaxsvrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxsvrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxsvrs, typedOther.maxsvrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxsvcs()).compareTo(typedOther.isSetMaxsvcs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxsvcs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxsvcs, typedOther.maxsvcs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxsgt()).compareTo(typedOther.isSetMaxsgt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxsgt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxsgt, typedOther.maxsgt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxaccsrs()).compareTo(typedOther.isSetMaxaccsrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxaccsrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxaccsrs, typedOther.maxaccsrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWkinitiated()).compareTo(typedOther.isSetWkinitiated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWkinitiated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wkinitiated, typedOther.wkinitiated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWkcompleted()).compareTo(typedOther.isSetWkcompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWkcompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wkcompleted, typedOther.wkcompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRreqmade()).compareTo(typedOther.isSetRreqmade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRreqmade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rreqmade, typedOther.rreqmade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClusterState(");
    boolean first = true;

    sb.append("currload:");
    sb.append(this.currload);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cmachines:");
    sb.append(this.cmachines);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cques:");
    sb.append(this.cques);
    first = false;
    if (!first) sb.append(", ");
    sb.append("csvrs:");
    sb.append(this.csvrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("csvcs:");
    sb.append(this.csvcs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("csgt:");
    sb.append(this.csgt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("caccsrs:");
    sb.append(this.caccsrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxmachines:");
    sb.append(this.maxmachines);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxques:");
    sb.append(this.maxques);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxsvrs:");
    sb.append(this.maxsvrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxsvcs:");
    sb.append(this.maxsvcs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxsgt:");
    sb.append(this.maxsgt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxaccsrs:");
    sb.append(this.maxaccsrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wkinitiated:");
    sb.append(this.wkinitiated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wkcompleted:");
    sb.append(this.wkcompleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rreqmade:");
    sb.append(this.rreqmade);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClusterStateStandardSchemeFactory implements SchemeFactory {
    public ClusterStateStandardScheme getScheme() {
      return new ClusterStateStandardScheme();
    }
  }

  private static class ClusterStateStandardScheme extends StandardScheme<ClusterState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClusterState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currload = iprot.readI64();
              struct.setCurrloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CMACHINES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmachines = iprot.readI32();
              struct.setCmachinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CQUES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cques = iprot.readI32();
              struct.setCquesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CSVRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.csvrs = iprot.readI32();
              struct.setCsvrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CSVCS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.csvcs = iprot.readI32();
              struct.setCsvcsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CSGT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.csgt = iprot.readI32();
              struct.setCsgtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CACCSRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.caccsrs = iprot.readI32();
              struct.setCaccsrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAXMACHINES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxmachines = iprot.readI32();
              struct.setMaxmachinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAXQUES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxques = iprot.readI32();
              struct.setMaxquesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAXSVRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxsvrs = iprot.readI32();
              struct.setMaxsvrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAXSVCS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxsvcs = iprot.readI32();
              struct.setMaxsvcsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAXSGT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxsgt = iprot.readI32();
              struct.setMaxsgtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAXACCSRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxaccsrs = iprot.readI32();
              struct.setMaxaccsrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WKINITIATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wkinitiated = iprot.readI32();
              struct.setWkinitiatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WKCOMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wkcompleted = iprot.readI32();
              struct.setWkcompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RREQMADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rreqmade = iprot.readI32();
              struct.setRreqmadeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClusterState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CURRLOAD_FIELD_DESC);
      oprot.writeI64(struct.currload);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CMACHINES_FIELD_DESC);
      oprot.writeI32(struct.cmachines);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CQUES_FIELD_DESC);
      oprot.writeI32(struct.cques);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CSVRS_FIELD_DESC);
      oprot.writeI32(struct.csvrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CSVCS_FIELD_DESC);
      oprot.writeI32(struct.csvcs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CSGT_FIELD_DESC);
      oprot.writeI32(struct.csgt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACCSRS_FIELD_DESC);
      oprot.writeI32(struct.caccsrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXMACHINES_FIELD_DESC);
      oprot.writeI32(struct.maxmachines);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXQUES_FIELD_DESC);
      oprot.writeI32(struct.maxques);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXSVRS_FIELD_DESC);
      oprot.writeI32(struct.maxsvrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXSVCS_FIELD_DESC);
      oprot.writeI32(struct.maxsvcs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXSGT_FIELD_DESC);
      oprot.writeI32(struct.maxsgt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXACCSRS_FIELD_DESC);
      oprot.writeI32(struct.maxaccsrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WKINITIATED_FIELD_DESC);
      oprot.writeI32(struct.wkinitiated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WKCOMPLETED_FIELD_DESC);
      oprot.writeI32(struct.wkcompleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RREQMADE_FIELD_DESC);
      oprot.writeI32(struct.rreqmade);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClusterStateTupleSchemeFactory implements SchemeFactory {
    public ClusterStateTupleScheme getScheme() {
      return new ClusterStateTupleScheme();
    }
  }

  private static class ClusterStateTupleScheme extends TupleScheme<ClusterState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClusterState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrload()) {
        optionals.set(0);
      }
      if (struct.isSetCmachines()) {
        optionals.set(1);
      }
      if (struct.isSetCques()) {
        optionals.set(2);
      }
      if (struct.isSetCsvrs()) {
        optionals.set(3);
      }
      if (struct.isSetCsvcs()) {
        optionals.set(4);
      }
      if (struct.isSetCsgt()) {
        optionals.set(5);
      }
      if (struct.isSetCaccsrs()) {
        optionals.set(6);
      }
      if (struct.isSetMaxmachines()) {
        optionals.set(7);
      }
      if (struct.isSetMaxques()) {
        optionals.set(8);
      }
      if (struct.isSetMaxsvrs()) {
        optionals.set(9);
      }
      if (struct.isSetMaxsvcs()) {
        optionals.set(10);
      }
      if (struct.isSetMaxsgt()) {
        optionals.set(11);
      }
      if (struct.isSetMaxaccsrs()) {
        optionals.set(12);
      }
      if (struct.isSetWkinitiated()) {
        optionals.set(13);
      }
      if (struct.isSetWkcompleted()) {
        optionals.set(14);
      }
      if (struct.isSetRreqmade()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetCurrload()) {
        oprot.writeI64(struct.currload);
      }
      if (struct.isSetCmachines()) {
        oprot.writeI32(struct.cmachines);
      }
      if (struct.isSetCques()) {
        oprot.writeI32(struct.cques);
      }
      if (struct.isSetCsvrs()) {
        oprot.writeI32(struct.csvrs);
      }
      if (struct.isSetCsvcs()) {
        oprot.writeI32(struct.csvcs);
      }
      if (struct.isSetCsgt()) {
        oprot.writeI32(struct.csgt);
      }
      if (struct.isSetCaccsrs()) {
        oprot.writeI32(struct.caccsrs);
      }
      if (struct.isSetMaxmachines()) {
        oprot.writeI32(struct.maxmachines);
      }
      if (struct.isSetMaxques()) {
        oprot.writeI32(struct.maxques);
      }
      if (struct.isSetMaxsvrs()) {
        oprot.writeI32(struct.maxsvrs);
      }
      if (struct.isSetMaxsvcs()) {
        oprot.writeI32(struct.maxsvcs);
      }
      if (struct.isSetMaxsgt()) {
        oprot.writeI32(struct.maxsgt);
      }
      if (struct.isSetMaxaccsrs()) {
        oprot.writeI32(struct.maxaccsrs);
      }
      if (struct.isSetWkinitiated()) {
        oprot.writeI32(struct.wkinitiated);
      }
      if (struct.isSetWkcompleted()) {
        oprot.writeI32(struct.wkcompleted);
      }
      if (struct.isSetRreqmade()) {
        oprot.writeI32(struct.rreqmade);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClusterState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.currload = iprot.readI64();
        struct.setCurrloadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cmachines = iprot.readI32();
        struct.setCmachinesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cques = iprot.readI32();
        struct.setCquesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.csvrs = iprot.readI32();
        struct.setCsvrsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.csvcs = iprot.readI32();
        struct.setCsvcsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.csgt = iprot.readI32();
        struct.setCsgtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.caccsrs = iprot.readI32();
        struct.setCaccsrsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxmachines = iprot.readI32();
        struct.setMaxmachinesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maxques = iprot.readI32();
        struct.setMaxquesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.maxsvrs = iprot.readI32();
        struct.setMaxsvrsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxsvcs = iprot.readI32();
        struct.setMaxsvcsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maxsgt = iprot.readI32();
        struct.setMaxsgtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.maxaccsrs = iprot.readI32();
        struct.setMaxaccsrsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.wkinitiated = iprot.readI32();
        struct.setWkinitiatedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.wkcompleted = iprot.readI32();
        struct.setWkcompletedIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rreqmade = iprot.readI32();
        struct.setRreqmadeIsSet(true);
      }
    }
  }

}

