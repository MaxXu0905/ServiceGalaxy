/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServerGroup implements org.apache.thrift.TBase<ServerGroup, ServerGroup._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerGroup");

  private static final org.apache.thrift.protocol.TField SGID_FIELD_DESC = new org.apache.thrift.protocol.TField("sgid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GRPID_FIELD_DESC = new org.apache.thrift.protocol.TField("grpid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SGNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sgname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CURMID_FIELD_DESC = new org.apache.thrift.protocol.TField("curmid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LMID_FIELD_DESC = new org.apache.thrift.protocol.TField("lmid", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServerGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServerGroupTupleSchemeFactory());
  }

  public long sgid; // required
  public int grpid; // required
  public String sgname; // required
  public int curmid; // required
  public String lmid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SGID((short)1, "sgid"),
    GRPID((short)2, "grpid"),
    SGNAME((short)3, "sgname"),
    CURMID((short)4, "curmid"),
    LMID((short)5, "lmid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SGID
          return SGID;
        case 2: // GRPID
          return GRPID;
        case 3: // SGNAME
          return SGNAME;
        case 4: // CURMID
          return CURMID;
        case 5: // LMID
          return LMID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SGID_ISSET_ID = 0;
  private static final int __GRPID_ISSET_ID = 1;
  private static final int __CURMID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SGID, new org.apache.thrift.meta_data.FieldMetaData("sgid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GRPID, new org.apache.thrift.meta_data.FieldMetaData("grpid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SGNAME, new org.apache.thrift.meta_data.FieldMetaData("sgname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURMID, new org.apache.thrift.meta_data.FieldMetaData("curmid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LMID, new org.apache.thrift.meta_data.FieldMetaData("lmid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerGroup.class, metaDataMap);
  }

  public ServerGroup() {
  }

  public ServerGroup(
    long sgid,
    int grpid,
    String sgname,
    int curmid,
    String lmid)
  {
    this();
    this.sgid = sgid;
    setSgidIsSet(true);
    this.grpid = grpid;
    setGrpidIsSet(true);
    this.sgname = sgname;
    this.curmid = curmid;
    setCurmidIsSet(true);
    this.lmid = lmid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerGroup(ServerGroup other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sgid = other.sgid;
    this.grpid = other.grpid;
    if (other.isSetSgname()) {
      this.sgname = other.sgname;
    }
    this.curmid = other.curmid;
    if (other.isSetLmid()) {
      this.lmid = other.lmid;
    }
  }

  public ServerGroup deepCopy() {
    return new ServerGroup(this);
  }

  @Override
  public void clear() {
    setSgidIsSet(false);
    this.sgid = 0;
    setGrpidIsSet(false);
    this.grpid = 0;
    this.sgname = null;
    setCurmidIsSet(false);
    this.curmid = 0;
    this.lmid = null;
  }

  public long getSgid() {
    return this.sgid;
  }

  public ServerGroup setSgid(long sgid) {
    this.sgid = sgid;
    setSgidIsSet(true);
    return this;
  }

  public void unsetSgid() {
    __isset_bit_vector.clear(__SGID_ISSET_ID);
  }

  /** Returns true if field sgid is set (has been assigned a value) and false otherwise */
  public boolean isSetSgid() {
    return __isset_bit_vector.get(__SGID_ISSET_ID);
  }

  public void setSgidIsSet(boolean value) {
    __isset_bit_vector.set(__SGID_ISSET_ID, value);
  }

  public int getGrpid() {
    return this.grpid;
  }

  public ServerGroup setGrpid(int grpid) {
    this.grpid = grpid;
    setGrpidIsSet(true);
    return this;
  }

  public void unsetGrpid() {
    __isset_bit_vector.clear(__GRPID_ISSET_ID);
  }

  /** Returns true if field grpid is set (has been assigned a value) and false otherwise */
  public boolean isSetGrpid() {
    return __isset_bit_vector.get(__GRPID_ISSET_ID);
  }

  public void setGrpidIsSet(boolean value) {
    __isset_bit_vector.set(__GRPID_ISSET_ID, value);
  }

  public String getSgname() {
    return this.sgname;
  }

  public ServerGroup setSgname(String sgname) {
    this.sgname = sgname;
    return this;
  }

  public void unsetSgname() {
    this.sgname = null;
  }

  /** Returns true if field sgname is set (has been assigned a value) and false otherwise */
  public boolean isSetSgname() {
    return this.sgname != null;
  }

  public void setSgnameIsSet(boolean value) {
    if (!value) {
      this.sgname = null;
    }
  }

  public int getCurmid() {
    return this.curmid;
  }

  public ServerGroup setCurmid(int curmid) {
    this.curmid = curmid;
    setCurmidIsSet(true);
    return this;
  }

  public void unsetCurmid() {
    __isset_bit_vector.clear(__CURMID_ISSET_ID);
  }

  /** Returns true if field curmid is set (has been assigned a value) and false otherwise */
  public boolean isSetCurmid() {
    return __isset_bit_vector.get(__CURMID_ISSET_ID);
  }

  public void setCurmidIsSet(boolean value) {
    __isset_bit_vector.set(__CURMID_ISSET_ID, value);
  }

  public String getLmid() {
    return this.lmid;
  }

  public ServerGroup setLmid(String lmid) {
    this.lmid = lmid;
    return this;
  }

  public void unsetLmid() {
    this.lmid = null;
  }

  /** Returns true if field lmid is set (has been assigned a value) and false otherwise */
  public boolean isSetLmid() {
    return this.lmid != null;
  }

  public void setLmidIsSet(boolean value) {
    if (!value) {
      this.lmid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SGID:
      if (value == null) {
        unsetSgid();
      } else {
        setSgid((Long)value);
      }
      break;

    case GRPID:
      if (value == null) {
        unsetGrpid();
      } else {
        setGrpid((Integer)value);
      }
      break;

    case SGNAME:
      if (value == null) {
        unsetSgname();
      } else {
        setSgname((String)value);
      }
      break;

    case CURMID:
      if (value == null) {
        unsetCurmid();
      } else {
        setCurmid((Integer)value);
      }
      break;

    case LMID:
      if (value == null) {
        unsetLmid();
      } else {
        setLmid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SGID:
      return Long.valueOf(getSgid());

    case GRPID:
      return Integer.valueOf(getGrpid());

    case SGNAME:
      return getSgname();

    case CURMID:
      return Integer.valueOf(getCurmid());

    case LMID:
      return getLmid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SGID:
      return isSetSgid();
    case GRPID:
      return isSetGrpid();
    case SGNAME:
      return isSetSgname();
    case CURMID:
      return isSetCurmid();
    case LMID:
      return isSetLmid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerGroup)
      return this.equals((ServerGroup)that);
    return false;
  }

  public boolean equals(ServerGroup that) {
    if (that == null)
      return false;

    boolean this_present_sgid = true;
    boolean that_present_sgid = true;
    if (this_present_sgid || that_present_sgid) {
      if (!(this_present_sgid && that_present_sgid))
        return false;
      if (this.sgid != that.sgid)
        return false;
    }

    boolean this_present_grpid = true;
    boolean that_present_grpid = true;
    if (this_present_grpid || that_present_grpid) {
      if (!(this_present_grpid && that_present_grpid))
        return false;
      if (this.grpid != that.grpid)
        return false;
    }

    boolean this_present_sgname = true && this.isSetSgname();
    boolean that_present_sgname = true && that.isSetSgname();
    if (this_present_sgname || that_present_sgname) {
      if (!(this_present_sgname && that_present_sgname))
        return false;
      if (!this.sgname.equals(that.sgname))
        return false;
    }

    boolean this_present_curmid = true;
    boolean that_present_curmid = true;
    if (this_present_curmid || that_present_curmid) {
      if (!(this_present_curmid && that_present_curmid))
        return false;
      if (this.curmid != that.curmid)
        return false;
    }

    boolean this_present_lmid = true && this.isSetLmid();
    boolean that_present_lmid = true && that.isSetLmid();
    if (this_present_lmid || that_present_lmid) {
      if (!(this_present_lmid && that_present_lmid))
        return false;
      if (!this.lmid.equals(that.lmid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServerGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServerGroup typedOther = (ServerGroup)other;

    lastComparison = Boolean.valueOf(isSetSgid()).compareTo(typedOther.isSetSgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgid, typedOther.sgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrpid()).compareTo(typedOther.isSetGrpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grpid, typedOther.grpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSgname()).compareTo(typedOther.isSetSgname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgname, typedOther.sgname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurmid()).compareTo(typedOther.isSetCurmid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurmid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curmid, typedOther.curmid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLmid()).compareTo(typedOther.isSetLmid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLmid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lmid, typedOther.lmid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServerGroup(");
    boolean first = true;

    sb.append("sgid:");
    sb.append(this.sgid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("grpid:");
    sb.append(this.grpid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sgname:");
    if (this.sgname == null) {
      sb.append("null");
    } else {
      sb.append(this.sgname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("curmid:");
    sb.append(this.curmid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lmid:");
    if (this.lmid == null) {
      sb.append("null");
    } else {
      sb.append(this.lmid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerGroupStandardSchemeFactory implements SchemeFactory {
    public ServerGroupStandardScheme getScheme() {
      return new ServerGroupStandardScheme();
    }
  }

  private static class ServerGroupStandardScheme extends StandardScheme<ServerGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sgid = iprot.readI64();
              struct.setSgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grpid = iprot.readI32();
              struct.setGrpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SGNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sgname = iprot.readString();
              struct.setSgnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURMID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curmid = iprot.readI32();
              struct.setCurmidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LMID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lmid = iprot.readString();
              struct.setLmidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SGID_FIELD_DESC);
      oprot.writeI64(struct.sgid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GRPID_FIELD_DESC);
      oprot.writeI32(struct.grpid);
      oprot.writeFieldEnd();
      if (struct.sgname != null) {
        oprot.writeFieldBegin(SGNAME_FIELD_DESC);
        oprot.writeString(struct.sgname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURMID_FIELD_DESC);
      oprot.writeI32(struct.curmid);
      oprot.writeFieldEnd();
      if (struct.lmid != null) {
        oprot.writeFieldBegin(LMID_FIELD_DESC);
        oprot.writeString(struct.lmid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerGroupTupleSchemeFactory implements SchemeFactory {
    public ServerGroupTupleScheme getScheme() {
      return new ServerGroupTupleScheme();
    }
  }

  private static class ServerGroupTupleScheme extends TupleScheme<ServerGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSgid()) {
        optionals.set(0);
      }
      if (struct.isSetGrpid()) {
        optionals.set(1);
      }
      if (struct.isSetSgname()) {
        optionals.set(2);
      }
      if (struct.isSetCurmid()) {
        optionals.set(3);
      }
      if (struct.isSetLmid()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSgid()) {
        oprot.writeI64(struct.sgid);
      }
      if (struct.isSetGrpid()) {
        oprot.writeI32(struct.grpid);
      }
      if (struct.isSetSgname()) {
        oprot.writeString(struct.sgname);
      }
      if (struct.isSetCurmid()) {
        oprot.writeI32(struct.curmid);
      }
      if (struct.isSetLmid()) {
        oprot.writeString(struct.lmid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sgid = iprot.readI64();
        struct.setSgidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.grpid = iprot.readI32();
        struct.setGrpidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sgname = iprot.readString();
        struct.setSgnameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.curmid = iprot.readI32();
        struct.setCurmidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lmid = iprot.readString();
        struct.setLmidIsSet(true);
      }
    }
  }

}

