/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueueInfo implements org.apache.thrift.TBase<QueueInfo, QueueInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueueInfo");

  private static final org.apache.thrift.protocol.TField SGID_FIELD_DESC = new org.apache.thrift.protocol.TField("sgid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("grace", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MAXGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("maxgen", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("paddr", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("saddr", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RCMD_FIELD_DESC = new org.apache.thrift.protocol.TField("rcmd", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueueInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueueInfoTupleSchemeFactory());
  }

  public long sgid; // required
  public int options; // required
  public int grace; // required
  public int maxgen; // required
  public int paddr; // required
  public String saddr; // required
  public String rcmd; // required
  public String filename; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SGID((short)1, "sgid"),
    OPTIONS((short)2, "options"),
    GRACE((short)3, "grace"),
    MAXGEN((short)4, "maxgen"),
    PADDR((short)5, "paddr"),
    SADDR((short)6, "saddr"),
    RCMD((short)7, "rcmd"),
    FILENAME((short)8, "filename");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SGID
          return SGID;
        case 2: // OPTIONS
          return OPTIONS;
        case 3: // GRACE
          return GRACE;
        case 4: // MAXGEN
          return MAXGEN;
        case 5: // PADDR
          return PADDR;
        case 6: // SADDR
          return SADDR;
        case 7: // RCMD
          return RCMD;
        case 8: // FILENAME
          return FILENAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SGID_ISSET_ID = 0;
  private static final int __OPTIONS_ISSET_ID = 1;
  private static final int __GRACE_ISSET_ID = 2;
  private static final int __MAXGEN_ISSET_ID = 3;
  private static final int __PADDR_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SGID, new org.apache.thrift.meta_data.FieldMetaData("sgid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRACE, new org.apache.thrift.meta_data.FieldMetaData("grace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXGEN, new org.apache.thrift.meta_data.FieldMetaData("maxgen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PADDR, new org.apache.thrift.meta_data.FieldMetaData("paddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SADDR, new org.apache.thrift.meta_data.FieldMetaData("saddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RCMD, new org.apache.thrift.meta_data.FieldMetaData("rcmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueueInfo.class, metaDataMap);
  }

  public QueueInfo() {
  }

  public QueueInfo(
    long sgid,
    int options,
    int grace,
    int maxgen,
    int paddr,
    String saddr,
    String rcmd,
    String filename)
  {
    this();
    this.sgid = sgid;
    setSgidIsSet(true);
    this.options = options;
    setOptionsIsSet(true);
    this.grace = grace;
    setGraceIsSet(true);
    this.maxgen = maxgen;
    setMaxgenIsSet(true);
    this.paddr = paddr;
    setPaddrIsSet(true);
    this.saddr = saddr;
    this.rcmd = rcmd;
    this.filename = filename;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueueInfo(QueueInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sgid = other.sgid;
    this.options = other.options;
    this.grace = other.grace;
    this.maxgen = other.maxgen;
    this.paddr = other.paddr;
    if (other.isSetSaddr()) {
      this.saddr = other.saddr;
    }
    if (other.isSetRcmd()) {
      this.rcmd = other.rcmd;
    }
    if (other.isSetFilename()) {
      this.filename = other.filename;
    }
  }

  public QueueInfo deepCopy() {
    return new QueueInfo(this);
  }

  @Override
  public void clear() {
    setSgidIsSet(false);
    this.sgid = 0;
    setOptionsIsSet(false);
    this.options = 0;
    setGraceIsSet(false);
    this.grace = 0;
    setMaxgenIsSet(false);
    this.maxgen = 0;
    setPaddrIsSet(false);
    this.paddr = 0;
    this.saddr = null;
    this.rcmd = null;
    this.filename = null;
  }

  public long getSgid() {
    return this.sgid;
  }

  public QueueInfo setSgid(long sgid) {
    this.sgid = sgid;
    setSgidIsSet(true);
    return this;
  }

  public void unsetSgid() {
    __isset_bit_vector.clear(__SGID_ISSET_ID);
  }

  /** Returns true if field sgid is set (has been assigned a value) and false otherwise */
  public boolean isSetSgid() {
    return __isset_bit_vector.get(__SGID_ISSET_ID);
  }

  public void setSgidIsSet(boolean value) {
    __isset_bit_vector.set(__SGID_ISSET_ID, value);
  }

  public int getOptions() {
    return this.options;
  }

  public QueueInfo setOptions(int options) {
    this.options = options;
    setOptionsIsSet(true);
    return this;
  }

  public void unsetOptions() {
    __isset_bit_vector.clear(__OPTIONS_ISSET_ID);
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return __isset_bit_vector.get(__OPTIONS_ISSET_ID);
  }

  public void setOptionsIsSet(boolean value) {
    __isset_bit_vector.set(__OPTIONS_ISSET_ID, value);
  }

  public int getGrace() {
    return this.grace;
  }

  public QueueInfo setGrace(int grace) {
    this.grace = grace;
    setGraceIsSet(true);
    return this;
  }

  public void unsetGrace() {
    __isset_bit_vector.clear(__GRACE_ISSET_ID);
  }

  /** Returns true if field grace is set (has been assigned a value) and false otherwise */
  public boolean isSetGrace() {
    return __isset_bit_vector.get(__GRACE_ISSET_ID);
  }

  public void setGraceIsSet(boolean value) {
    __isset_bit_vector.set(__GRACE_ISSET_ID, value);
  }

  public int getMaxgen() {
    return this.maxgen;
  }

  public QueueInfo setMaxgen(int maxgen) {
    this.maxgen = maxgen;
    setMaxgenIsSet(true);
    return this;
  }

  public void unsetMaxgen() {
    __isset_bit_vector.clear(__MAXGEN_ISSET_ID);
  }

  /** Returns true if field maxgen is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxgen() {
    return __isset_bit_vector.get(__MAXGEN_ISSET_ID);
  }

  public void setMaxgenIsSet(boolean value) {
    __isset_bit_vector.set(__MAXGEN_ISSET_ID, value);
  }

  public int getPaddr() {
    return this.paddr;
  }

  public QueueInfo setPaddr(int paddr) {
    this.paddr = paddr;
    setPaddrIsSet(true);
    return this;
  }

  public void unsetPaddr() {
    __isset_bit_vector.clear(__PADDR_ISSET_ID);
  }

  /** Returns true if field paddr is set (has been assigned a value) and false otherwise */
  public boolean isSetPaddr() {
    return __isset_bit_vector.get(__PADDR_ISSET_ID);
  }

  public void setPaddrIsSet(boolean value) {
    __isset_bit_vector.set(__PADDR_ISSET_ID, value);
  }

  public String getSaddr() {
    return this.saddr;
  }

  public QueueInfo setSaddr(String saddr) {
    this.saddr = saddr;
    return this;
  }

  public void unsetSaddr() {
    this.saddr = null;
  }

  /** Returns true if field saddr is set (has been assigned a value) and false otherwise */
  public boolean isSetSaddr() {
    return this.saddr != null;
  }

  public void setSaddrIsSet(boolean value) {
    if (!value) {
      this.saddr = null;
    }
  }

  public String getRcmd() {
    return this.rcmd;
  }

  public QueueInfo setRcmd(String rcmd) {
    this.rcmd = rcmd;
    return this;
  }

  public void unsetRcmd() {
    this.rcmd = null;
  }

  /** Returns true if field rcmd is set (has been assigned a value) and false otherwise */
  public boolean isSetRcmd() {
    return this.rcmd != null;
  }

  public void setRcmdIsSet(boolean value) {
    if (!value) {
      this.rcmd = null;
    }
  }

  public String getFilename() {
    return this.filename;
  }

  public QueueInfo setFilename(String filename) {
    this.filename = filename;
    return this;
  }

  public void unsetFilename() {
    this.filename = null;
  }

  /** Returns true if field filename is set (has been assigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.filename = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SGID:
      if (value == null) {
        unsetSgid();
      } else {
        setSgid((Long)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((Integer)value);
      }
      break;

    case GRACE:
      if (value == null) {
        unsetGrace();
      } else {
        setGrace((Integer)value);
      }
      break;

    case MAXGEN:
      if (value == null) {
        unsetMaxgen();
      } else {
        setMaxgen((Integer)value);
      }
      break;

    case PADDR:
      if (value == null) {
        unsetPaddr();
      } else {
        setPaddr((Integer)value);
      }
      break;

    case SADDR:
      if (value == null) {
        unsetSaddr();
      } else {
        setSaddr((String)value);
      }
      break;

    case RCMD:
      if (value == null) {
        unsetRcmd();
      } else {
        setRcmd((String)value);
      }
      break;

    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SGID:
      return Long.valueOf(getSgid());

    case OPTIONS:
      return Integer.valueOf(getOptions());

    case GRACE:
      return Integer.valueOf(getGrace());

    case MAXGEN:
      return Integer.valueOf(getMaxgen());

    case PADDR:
      return Integer.valueOf(getPaddr());

    case SADDR:
      return getSaddr();

    case RCMD:
      return getRcmd();

    case FILENAME:
      return getFilename();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SGID:
      return isSetSgid();
    case OPTIONS:
      return isSetOptions();
    case GRACE:
      return isSetGrace();
    case MAXGEN:
      return isSetMaxgen();
    case PADDR:
      return isSetPaddr();
    case SADDR:
      return isSetSaddr();
    case RCMD:
      return isSetRcmd();
    case FILENAME:
      return isSetFilename();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueueInfo)
      return this.equals((QueueInfo)that);
    return false;
  }

  public boolean equals(QueueInfo that) {
    if (that == null)
      return false;

    boolean this_present_sgid = true;
    boolean that_present_sgid = true;
    if (this_present_sgid || that_present_sgid) {
      if (!(this_present_sgid && that_present_sgid))
        return false;
      if (this.sgid != that.sgid)
        return false;
    }

    boolean this_present_options = true;
    boolean that_present_options = true;
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (this.options != that.options)
        return false;
    }

    boolean this_present_grace = true;
    boolean that_present_grace = true;
    if (this_present_grace || that_present_grace) {
      if (!(this_present_grace && that_present_grace))
        return false;
      if (this.grace != that.grace)
        return false;
    }

    boolean this_present_maxgen = true;
    boolean that_present_maxgen = true;
    if (this_present_maxgen || that_present_maxgen) {
      if (!(this_present_maxgen && that_present_maxgen))
        return false;
      if (this.maxgen != that.maxgen)
        return false;
    }

    boolean this_present_paddr = true;
    boolean that_present_paddr = true;
    if (this_present_paddr || that_present_paddr) {
      if (!(this_present_paddr && that_present_paddr))
        return false;
      if (this.paddr != that.paddr)
        return false;
    }

    boolean this_present_saddr = true && this.isSetSaddr();
    boolean that_present_saddr = true && that.isSetSaddr();
    if (this_present_saddr || that_present_saddr) {
      if (!(this_present_saddr && that_present_saddr))
        return false;
      if (!this.saddr.equals(that.saddr))
        return false;
    }

    boolean this_present_rcmd = true && this.isSetRcmd();
    boolean that_present_rcmd = true && that.isSetRcmd();
    if (this_present_rcmd || that_present_rcmd) {
      if (!(this_present_rcmd && that_present_rcmd))
        return false;
      if (!this.rcmd.equals(that.rcmd))
        return false;
    }

    boolean this_present_filename = true && this.isSetFilename();
    boolean that_present_filename = true && that.isSetFilename();
    if (this_present_filename || that_present_filename) {
      if (!(this_present_filename && that_present_filename))
        return false;
      if (!this.filename.equals(that.filename))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueueInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueueInfo typedOther = (QueueInfo)other;

    lastComparison = Boolean.valueOf(isSetSgid()).compareTo(typedOther.isSetSgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgid, typedOther.sgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(typedOther.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, typedOther.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrace()).compareTo(typedOther.isSetGrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grace, typedOther.grace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxgen()).compareTo(typedOther.isSetMaxgen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxgen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxgen, typedOther.maxgen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaddr()).compareTo(typedOther.isSetPaddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paddr, typedOther.paddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaddr()).compareTo(typedOther.isSetSaddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saddr, typedOther.saddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRcmd()).compareTo(typedOther.isSetRcmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRcmd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rcmd, typedOther.rcmd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, typedOther.filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueueInfo(");
    boolean first = true;

    sb.append("sgid:");
    sb.append(this.sgid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    sb.append(this.options);
    first = false;
    if (!first) sb.append(", ");
    sb.append("grace:");
    sb.append(this.grace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxgen:");
    sb.append(this.maxgen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paddr:");
    sb.append(this.paddr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saddr:");
    if (this.saddr == null) {
      sb.append("null");
    } else {
      sb.append(this.saddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rcmd:");
    if (this.rcmd == null) {
      sb.append("null");
    } else {
      sb.append(this.rcmd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filename:");
    if (this.filename == null) {
      sb.append("null");
    } else {
      sb.append(this.filename);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueueInfoStandardSchemeFactory implements SchemeFactory {
    public QueueInfoStandardScheme getScheme() {
      return new QueueInfoStandardScheme();
    }
  }

  private static class QueueInfoStandardScheme extends StandardScheme<QueueInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueueInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sgid = iprot.readI64();
              struct.setSgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.options = iprot.readI32();
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grace = iprot.readI32();
              struct.setGraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAXGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxgen = iprot.readI32();
              struct.setMaxgenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paddr = iprot.readI32();
              struct.setPaddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saddr = iprot.readString();
              struct.setSaddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RCMD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rcmd = iprot.readString();
              struct.setRcmdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueueInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SGID_FIELD_DESC);
      oprot.writeI64(struct.sgid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
      oprot.writeI32(struct.options);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GRACE_FIELD_DESC);
      oprot.writeI32(struct.grace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXGEN_FIELD_DESC);
      oprot.writeI32(struct.maxgen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PADDR_FIELD_DESC);
      oprot.writeI32(struct.paddr);
      oprot.writeFieldEnd();
      if (struct.saddr != null) {
        oprot.writeFieldBegin(SADDR_FIELD_DESC);
        oprot.writeString(struct.saddr);
        oprot.writeFieldEnd();
      }
      if (struct.rcmd != null) {
        oprot.writeFieldBegin(RCMD_FIELD_DESC);
        oprot.writeString(struct.rcmd);
        oprot.writeFieldEnd();
      }
      if (struct.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(struct.filename);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueueInfoTupleSchemeFactory implements SchemeFactory {
    public QueueInfoTupleScheme getScheme() {
      return new QueueInfoTupleScheme();
    }
  }

  private static class QueueInfoTupleScheme extends TupleScheme<QueueInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueueInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSgid()) {
        optionals.set(0);
      }
      if (struct.isSetOptions()) {
        optionals.set(1);
      }
      if (struct.isSetGrace()) {
        optionals.set(2);
      }
      if (struct.isSetMaxgen()) {
        optionals.set(3);
      }
      if (struct.isSetPaddr()) {
        optionals.set(4);
      }
      if (struct.isSetSaddr()) {
        optionals.set(5);
      }
      if (struct.isSetRcmd()) {
        optionals.set(6);
      }
      if (struct.isSetFilename()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSgid()) {
        oprot.writeI64(struct.sgid);
      }
      if (struct.isSetOptions()) {
        oprot.writeI32(struct.options);
      }
      if (struct.isSetGrace()) {
        oprot.writeI32(struct.grace);
      }
      if (struct.isSetMaxgen()) {
        oprot.writeI32(struct.maxgen);
      }
      if (struct.isSetPaddr()) {
        oprot.writeI32(struct.paddr);
      }
      if (struct.isSetSaddr()) {
        oprot.writeString(struct.saddr);
      }
      if (struct.isSetRcmd()) {
        oprot.writeString(struct.rcmd);
      }
      if (struct.isSetFilename()) {
        oprot.writeString(struct.filename);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueueInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.sgid = iprot.readI64();
        struct.setSgidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.options = iprot.readI32();
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.grace = iprot.readI32();
        struct.setGraceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxgen = iprot.readI32();
        struct.setMaxgenIsSet(true);
      }
      if (incoming.get(4)) {
        struct.paddr = iprot.readI32();
        struct.setPaddrIsSet(true);
      }
      if (incoming.get(5)) {
        struct.saddr = iprot.readString();
        struct.setSaddrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rcmd = iprot.readString();
        struct.setRcmdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.filename = iprot.readString();
        struct.setFilenameIsSet(true);
      }
    }
  }

}

