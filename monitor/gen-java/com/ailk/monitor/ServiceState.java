/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServiceState implements org.apache.thrift.TBase<ServiceState, ServiceState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceState");

  private static final org.apache.thrift.protocol.TField SGID_FIELD_DESC = new org.apache.thrift.protocol.TField("sgid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NCOMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("ncompleted", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NQUEUED_FIELD_DESC = new org.apache.thrift.protocol.TField("nqueued", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceStateTupleSchemeFactory());
  }

  public long sgid; // required
  public int ncompleted; // required
  public int nqueued; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SGID((short)1, "sgid"),
    NCOMPLETED((short)2, "ncompleted"),
    NQUEUED((short)3, "nqueued"),
    STATUS((short)4, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SGID
          return SGID;
        case 2: // NCOMPLETED
          return NCOMPLETED;
        case 3: // NQUEUED
          return NQUEUED;
        case 4: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SGID_ISSET_ID = 0;
  private static final int __NCOMPLETED_ISSET_ID = 1;
  private static final int __NQUEUED_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SGID, new org.apache.thrift.meta_data.FieldMetaData("sgid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NCOMPLETED, new org.apache.thrift.meta_data.FieldMetaData("ncompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NQUEUED, new org.apache.thrift.meta_data.FieldMetaData("nqueued", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceState.class, metaDataMap);
  }

  public ServiceState() {
  }

  public ServiceState(
    long sgid,
    int ncompleted,
    int nqueued,
    int status)
  {
    this();
    this.sgid = sgid;
    setSgidIsSet(true);
    this.ncompleted = ncompleted;
    setNcompletedIsSet(true);
    this.nqueued = nqueued;
    setNqueuedIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceState(ServiceState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sgid = other.sgid;
    this.ncompleted = other.ncompleted;
    this.nqueued = other.nqueued;
    this.status = other.status;
  }

  public ServiceState deepCopy() {
    return new ServiceState(this);
  }

  @Override
  public void clear() {
    setSgidIsSet(false);
    this.sgid = 0;
    setNcompletedIsSet(false);
    this.ncompleted = 0;
    setNqueuedIsSet(false);
    this.nqueued = 0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public long getSgid() {
    return this.sgid;
  }

  public ServiceState setSgid(long sgid) {
    this.sgid = sgid;
    setSgidIsSet(true);
    return this;
  }

  public void unsetSgid() {
    __isset_bit_vector.clear(__SGID_ISSET_ID);
  }

  /** Returns true if field sgid is set (has been assigned a value) and false otherwise */
  public boolean isSetSgid() {
    return __isset_bit_vector.get(__SGID_ISSET_ID);
  }

  public void setSgidIsSet(boolean value) {
    __isset_bit_vector.set(__SGID_ISSET_ID, value);
  }

  public int getNcompleted() {
    return this.ncompleted;
  }

  public ServiceState setNcompleted(int ncompleted) {
    this.ncompleted = ncompleted;
    setNcompletedIsSet(true);
    return this;
  }

  public void unsetNcompleted() {
    __isset_bit_vector.clear(__NCOMPLETED_ISSET_ID);
  }

  /** Returns true if field ncompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetNcompleted() {
    return __isset_bit_vector.get(__NCOMPLETED_ISSET_ID);
  }

  public void setNcompletedIsSet(boolean value) {
    __isset_bit_vector.set(__NCOMPLETED_ISSET_ID, value);
  }

  public int getNqueued() {
    return this.nqueued;
  }

  public ServiceState setNqueued(int nqueued) {
    this.nqueued = nqueued;
    setNqueuedIsSet(true);
    return this;
  }

  public void unsetNqueued() {
    __isset_bit_vector.clear(__NQUEUED_ISSET_ID);
  }

  /** Returns true if field nqueued is set (has been assigned a value) and false otherwise */
  public boolean isSetNqueued() {
    return __isset_bit_vector.get(__NQUEUED_ISSET_ID);
  }

  public void setNqueuedIsSet(boolean value) {
    __isset_bit_vector.set(__NQUEUED_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ServiceState setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SGID:
      if (value == null) {
        unsetSgid();
      } else {
        setSgid((Long)value);
      }
      break;

    case NCOMPLETED:
      if (value == null) {
        unsetNcompleted();
      } else {
        setNcompleted((Integer)value);
      }
      break;

    case NQUEUED:
      if (value == null) {
        unsetNqueued();
      } else {
        setNqueued((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SGID:
      return Long.valueOf(getSgid());

    case NCOMPLETED:
      return Integer.valueOf(getNcompleted());

    case NQUEUED:
      return Integer.valueOf(getNqueued());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SGID:
      return isSetSgid();
    case NCOMPLETED:
      return isSetNcompleted();
    case NQUEUED:
      return isSetNqueued();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceState)
      return this.equals((ServiceState)that);
    return false;
  }

  public boolean equals(ServiceState that) {
    if (that == null)
      return false;

    boolean this_present_sgid = true;
    boolean that_present_sgid = true;
    if (this_present_sgid || that_present_sgid) {
      if (!(this_present_sgid && that_present_sgid))
        return false;
      if (this.sgid != that.sgid)
        return false;
    }

    boolean this_present_ncompleted = true;
    boolean that_present_ncompleted = true;
    if (this_present_ncompleted || that_present_ncompleted) {
      if (!(this_present_ncompleted && that_present_ncompleted))
        return false;
      if (this.ncompleted != that.ncompleted)
        return false;
    }

    boolean this_present_nqueued = true;
    boolean that_present_nqueued = true;
    if (this_present_nqueued || that_present_nqueued) {
      if (!(this_present_nqueued && that_present_nqueued))
        return false;
      if (this.nqueued != that.nqueued)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServiceState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServiceState typedOther = (ServiceState)other;

    lastComparison = Boolean.valueOf(isSetSgid()).compareTo(typedOther.isSetSgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgid, typedOther.sgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNcompleted()).compareTo(typedOther.isSetNcompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNcompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ncompleted, typedOther.ncompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNqueued()).compareTo(typedOther.isSetNqueued());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNqueued()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nqueued, typedOther.nqueued);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceState(");
    boolean first = true;

    sb.append("sgid:");
    sb.append(this.sgid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ncompleted:");
    sb.append(this.ncompleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nqueued:");
    sb.append(this.nqueued);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceStateStandardSchemeFactory implements SchemeFactory {
    public ServiceStateStandardScheme getScheme() {
      return new ServiceStateStandardScheme();
    }
  }

  private static class ServiceStateStandardScheme extends StandardScheme<ServiceState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sgid = iprot.readI64();
              struct.setSgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NCOMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ncompleted = iprot.readI32();
              struct.setNcompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NQUEUED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nqueued = iprot.readI32();
              struct.setNqueuedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SGID_FIELD_DESC);
      oprot.writeI64(struct.sgid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NCOMPLETED_FIELD_DESC);
      oprot.writeI32(struct.ncompleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NQUEUED_FIELD_DESC);
      oprot.writeI32(struct.nqueued);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceStateTupleSchemeFactory implements SchemeFactory {
    public ServiceStateTupleScheme getScheme() {
      return new ServiceStateTupleScheme();
    }
  }

  private static class ServiceStateTupleScheme extends TupleScheme<ServiceState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSgid()) {
        optionals.set(0);
      }
      if (struct.isSetNcompleted()) {
        optionals.set(1);
      }
      if (struct.isSetNqueued()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSgid()) {
        oprot.writeI64(struct.sgid);
      }
      if (struct.isSetNcompleted()) {
        oprot.writeI32(struct.ncompleted);
      }
      if (struct.isSetNqueued()) {
        oprot.writeI32(struct.nqueued);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sgid = iprot.readI64();
        struct.setSgidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ncompleted = iprot.readI32();
        struct.setNcompletedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nqueued = iprot.readI32();
        struct.setNqueuedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}

