/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClusterInfo implements org.apache.thrift.TBase<ClusterInfo, ClusterInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClusterInfo");

  private static final org.apache.thrift.protocol.TField IPCKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("ipckey", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("master", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAXPES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxpes", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MAXNODES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxnodes", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MAXACCSRS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxaccsrs", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MAXQUES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxques", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MAXSGT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxsgt", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MAXSVRS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxsvrs", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField MAXSVCS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxsvcs", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField QUEBKTS_FIELD_DESC = new org.apache.thrift.protocol.TField("quebkts", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SGTBKTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sgtbkts", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SVRBKTS_FIELD_DESC = new org.apache.thrift.protocol.TField("svrbkts", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SVCBKTS_FIELD_DESC = new org.apache.thrift.protocol.TField("svcbkts", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField SCAN_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_unit", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SANITY_SCAN_FIELD_DESC = new org.apache.thrift.protocol.TField("sanity_scan", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField STACK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("stack_size", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField MAX_NUM_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("max_num_msg", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField MAX_MSG_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_msg_size", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField BLOCK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("block_time", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField DBBM_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dbbm_wait", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField BBM_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("bbm_query", org.apache.thrift.protocol.TType.I64, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClusterInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClusterInfoTupleSchemeFactory());
  }

  public int ipckey; // required
  public int uid; // required
  public int gid; // required
  public int perm; // required
  public int options; // required
  public String master; // required
  public int current; // required
  public int maxpes; // required
  public int maxnodes; // required
  public int maxaccsrs; // required
  public int maxques; // required
  public int maxsgt; // required
  public int maxsvrs; // required
  public int maxsvcs; // required
  public int quebkts; // required
  public int sgtbkts; // required
  public int svrbkts; // required
  public int svcbkts; // required
  public int scan_unit; // required
  public int sanity_scan; // required
  public int stack_size; // required
  public long max_num_msg; // required
  public long max_msg_size; // required
  public long block_time; // required
  public long dbbm_wait; // required
  public long bbm_query; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IPCKEY((short)1, "ipckey"),
    UID((short)2, "uid"),
    GID((short)3, "gid"),
    PERM((short)4, "perm"),
    OPTIONS((short)5, "options"),
    MASTER((short)6, "master"),
    CURRENT((short)7, "current"),
    MAXPES((short)8, "maxpes"),
    MAXNODES((short)9, "maxnodes"),
    MAXACCSRS((short)10, "maxaccsrs"),
    MAXQUES((short)11, "maxques"),
    MAXSGT((short)12, "maxsgt"),
    MAXSVRS((short)13, "maxsvrs"),
    MAXSVCS((short)14, "maxsvcs"),
    QUEBKTS((short)15, "quebkts"),
    SGTBKTS((short)16, "sgtbkts"),
    SVRBKTS((short)17, "svrbkts"),
    SVCBKTS((short)18, "svcbkts"),
    SCAN_UNIT((short)19, "scan_unit"),
    SANITY_SCAN((short)20, "sanity_scan"),
    STACK_SIZE((short)21, "stack_size"),
    MAX_NUM_MSG((short)22, "max_num_msg"),
    MAX_MSG_SIZE((short)23, "max_msg_size"),
    BLOCK_TIME((short)24, "block_time"),
    DBBM_WAIT((short)25, "dbbm_wait"),
    BBM_QUERY((short)26, "bbm_query");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IPCKEY
          return IPCKEY;
        case 2: // UID
          return UID;
        case 3: // GID
          return GID;
        case 4: // PERM
          return PERM;
        case 5: // OPTIONS
          return OPTIONS;
        case 6: // MASTER
          return MASTER;
        case 7: // CURRENT
          return CURRENT;
        case 8: // MAXPES
          return MAXPES;
        case 9: // MAXNODES
          return MAXNODES;
        case 10: // MAXACCSRS
          return MAXACCSRS;
        case 11: // MAXQUES
          return MAXQUES;
        case 12: // MAXSGT
          return MAXSGT;
        case 13: // MAXSVRS
          return MAXSVRS;
        case 14: // MAXSVCS
          return MAXSVCS;
        case 15: // QUEBKTS
          return QUEBKTS;
        case 16: // SGTBKTS
          return SGTBKTS;
        case 17: // SVRBKTS
          return SVRBKTS;
        case 18: // SVCBKTS
          return SVCBKTS;
        case 19: // SCAN_UNIT
          return SCAN_UNIT;
        case 20: // SANITY_SCAN
          return SANITY_SCAN;
        case 21: // STACK_SIZE
          return STACK_SIZE;
        case 22: // MAX_NUM_MSG
          return MAX_NUM_MSG;
        case 23: // MAX_MSG_SIZE
          return MAX_MSG_SIZE;
        case 24: // BLOCK_TIME
          return BLOCK_TIME;
        case 25: // DBBM_WAIT
          return DBBM_WAIT;
        case 26: // BBM_QUERY
          return BBM_QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IPCKEY_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private static final int __GID_ISSET_ID = 2;
  private static final int __PERM_ISSET_ID = 3;
  private static final int __OPTIONS_ISSET_ID = 4;
  private static final int __CURRENT_ISSET_ID = 5;
  private static final int __MAXPES_ISSET_ID = 6;
  private static final int __MAXNODES_ISSET_ID = 7;
  private static final int __MAXACCSRS_ISSET_ID = 8;
  private static final int __MAXQUES_ISSET_ID = 9;
  private static final int __MAXSGT_ISSET_ID = 10;
  private static final int __MAXSVRS_ISSET_ID = 11;
  private static final int __MAXSVCS_ISSET_ID = 12;
  private static final int __QUEBKTS_ISSET_ID = 13;
  private static final int __SGTBKTS_ISSET_ID = 14;
  private static final int __SVRBKTS_ISSET_ID = 15;
  private static final int __SVCBKTS_ISSET_ID = 16;
  private static final int __SCAN_UNIT_ISSET_ID = 17;
  private static final int __SANITY_SCAN_ISSET_ID = 18;
  private static final int __STACK_SIZE_ISSET_ID = 19;
  private static final int __MAX_NUM_MSG_ISSET_ID = 20;
  private static final int __MAX_MSG_SIZE_ISSET_ID = 21;
  private static final int __BLOCK_TIME_ISSET_ID = 22;
  private static final int __DBBM_WAIT_ISSET_ID = 23;
  private static final int __BBM_QUERY_ISSET_ID = 24;
  private BitSet __isset_bit_vector = new BitSet(25);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IPCKEY, new org.apache.thrift.meta_data.FieldMetaData("ipckey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MASTER, new org.apache.thrift.meta_data.FieldMetaData("master", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT, new org.apache.thrift.meta_data.FieldMetaData("current", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXPES, new org.apache.thrift.meta_data.FieldMetaData("maxpes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXNODES, new org.apache.thrift.meta_data.FieldMetaData("maxnodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXACCSRS, new org.apache.thrift.meta_data.FieldMetaData("maxaccsrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXQUES, new org.apache.thrift.meta_data.FieldMetaData("maxques", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXSGT, new org.apache.thrift.meta_data.FieldMetaData("maxsgt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXSVRS, new org.apache.thrift.meta_data.FieldMetaData("maxsvrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXSVCS, new org.apache.thrift.meta_data.FieldMetaData("maxsvcs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEBKTS, new org.apache.thrift.meta_data.FieldMetaData("quebkts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SGTBKTS, new org.apache.thrift.meta_data.FieldMetaData("sgtbkts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SVRBKTS, new org.apache.thrift.meta_data.FieldMetaData("svrbkts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SVCBKTS, new org.apache.thrift.meta_data.FieldMetaData("svcbkts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCAN_UNIT, new org.apache.thrift.meta_data.FieldMetaData("scan_unit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SANITY_SCAN, new org.apache.thrift.meta_data.FieldMetaData("sanity_scan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STACK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("stack_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_NUM_MSG, new org.apache.thrift.meta_data.FieldMetaData("max_num_msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_MSG_SIZE, new org.apache.thrift.meta_data.FieldMetaData("max_msg_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_TIME, new org.apache.thrift.meta_data.FieldMetaData("block_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DBBM_WAIT, new org.apache.thrift.meta_data.FieldMetaData("dbbm_wait", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BBM_QUERY, new org.apache.thrift.meta_data.FieldMetaData("bbm_query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClusterInfo.class, metaDataMap);
  }

  public ClusterInfo() {
  }

  public ClusterInfo(
    int ipckey,
    int uid,
    int gid,
    int perm,
    int options,
    String master,
    int current,
    int maxpes,
    int maxnodes,
    int maxaccsrs,
    int maxques,
    int maxsgt,
    int maxsvrs,
    int maxsvcs,
    int quebkts,
    int sgtbkts,
    int svrbkts,
    int svcbkts,
    int scan_unit,
    int sanity_scan,
    int stack_size,
    long max_num_msg,
    long max_msg_size,
    long block_time,
    long dbbm_wait,
    long bbm_query)
  {
    this();
    this.ipckey = ipckey;
    setIpckeyIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.gid = gid;
    setGidIsSet(true);
    this.perm = perm;
    setPermIsSet(true);
    this.options = options;
    setOptionsIsSet(true);
    this.master = master;
    this.current = current;
    setCurrentIsSet(true);
    this.maxpes = maxpes;
    setMaxpesIsSet(true);
    this.maxnodes = maxnodes;
    setMaxnodesIsSet(true);
    this.maxaccsrs = maxaccsrs;
    setMaxaccsrsIsSet(true);
    this.maxques = maxques;
    setMaxquesIsSet(true);
    this.maxsgt = maxsgt;
    setMaxsgtIsSet(true);
    this.maxsvrs = maxsvrs;
    setMaxsvrsIsSet(true);
    this.maxsvcs = maxsvcs;
    setMaxsvcsIsSet(true);
    this.quebkts = quebkts;
    setQuebktsIsSet(true);
    this.sgtbkts = sgtbkts;
    setSgtbktsIsSet(true);
    this.svrbkts = svrbkts;
    setSvrbktsIsSet(true);
    this.svcbkts = svcbkts;
    setSvcbktsIsSet(true);
    this.scan_unit = scan_unit;
    setScan_unitIsSet(true);
    this.sanity_scan = sanity_scan;
    setSanity_scanIsSet(true);
    this.stack_size = stack_size;
    setStack_sizeIsSet(true);
    this.max_num_msg = max_num_msg;
    setMax_num_msgIsSet(true);
    this.max_msg_size = max_msg_size;
    setMax_msg_sizeIsSet(true);
    this.block_time = block_time;
    setBlock_timeIsSet(true);
    this.dbbm_wait = dbbm_wait;
    setDbbm_waitIsSet(true);
    this.bbm_query = bbm_query;
    setBbm_queryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClusterInfo(ClusterInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.ipckey = other.ipckey;
    this.uid = other.uid;
    this.gid = other.gid;
    this.perm = other.perm;
    this.options = other.options;
    if (other.isSetMaster()) {
      this.master = other.master;
    }
    this.current = other.current;
    this.maxpes = other.maxpes;
    this.maxnodes = other.maxnodes;
    this.maxaccsrs = other.maxaccsrs;
    this.maxques = other.maxques;
    this.maxsgt = other.maxsgt;
    this.maxsvrs = other.maxsvrs;
    this.maxsvcs = other.maxsvcs;
    this.quebkts = other.quebkts;
    this.sgtbkts = other.sgtbkts;
    this.svrbkts = other.svrbkts;
    this.svcbkts = other.svcbkts;
    this.scan_unit = other.scan_unit;
    this.sanity_scan = other.sanity_scan;
    this.stack_size = other.stack_size;
    this.max_num_msg = other.max_num_msg;
    this.max_msg_size = other.max_msg_size;
    this.block_time = other.block_time;
    this.dbbm_wait = other.dbbm_wait;
    this.bbm_query = other.bbm_query;
  }

  public ClusterInfo deepCopy() {
    return new ClusterInfo(this);
  }

  @Override
  public void clear() {
    setIpckeyIsSet(false);
    this.ipckey = 0;
    setUidIsSet(false);
    this.uid = 0;
    setGidIsSet(false);
    this.gid = 0;
    setPermIsSet(false);
    this.perm = 0;
    setOptionsIsSet(false);
    this.options = 0;
    this.master = null;
    setCurrentIsSet(false);
    this.current = 0;
    setMaxpesIsSet(false);
    this.maxpes = 0;
    setMaxnodesIsSet(false);
    this.maxnodes = 0;
    setMaxaccsrsIsSet(false);
    this.maxaccsrs = 0;
    setMaxquesIsSet(false);
    this.maxques = 0;
    setMaxsgtIsSet(false);
    this.maxsgt = 0;
    setMaxsvrsIsSet(false);
    this.maxsvrs = 0;
    setMaxsvcsIsSet(false);
    this.maxsvcs = 0;
    setQuebktsIsSet(false);
    this.quebkts = 0;
    setSgtbktsIsSet(false);
    this.sgtbkts = 0;
    setSvrbktsIsSet(false);
    this.svrbkts = 0;
    setSvcbktsIsSet(false);
    this.svcbkts = 0;
    setScan_unitIsSet(false);
    this.scan_unit = 0;
    setSanity_scanIsSet(false);
    this.sanity_scan = 0;
    setStack_sizeIsSet(false);
    this.stack_size = 0;
    setMax_num_msgIsSet(false);
    this.max_num_msg = 0;
    setMax_msg_sizeIsSet(false);
    this.max_msg_size = 0;
    setBlock_timeIsSet(false);
    this.block_time = 0;
    setDbbm_waitIsSet(false);
    this.dbbm_wait = 0;
    setBbm_queryIsSet(false);
    this.bbm_query = 0;
  }

  public int getIpckey() {
    return this.ipckey;
  }

  public ClusterInfo setIpckey(int ipckey) {
    this.ipckey = ipckey;
    setIpckeyIsSet(true);
    return this;
  }

  public void unsetIpckey() {
    __isset_bit_vector.clear(__IPCKEY_ISSET_ID);
  }

  /** Returns true if field ipckey is set (has been assigned a value) and false otherwise */
  public boolean isSetIpckey() {
    return __isset_bit_vector.get(__IPCKEY_ISSET_ID);
  }

  public void setIpckeyIsSet(boolean value) {
    __isset_bit_vector.set(__IPCKEY_ISSET_ID, value);
  }

  public int getUid() {
    return this.uid;
  }

  public ClusterInfo setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public int getGid() {
    return this.gid;
  }

  public ClusterInfo setGid(int gid) {
    this.gid = gid;
    setGidIsSet(true);
    return this;
  }

  public void unsetGid() {
    __isset_bit_vector.clear(__GID_ISSET_ID);
  }

  /** Returns true if field gid is set (has been assigned a value) and false otherwise */
  public boolean isSetGid() {
    return __isset_bit_vector.get(__GID_ISSET_ID);
  }

  public void setGidIsSet(boolean value) {
    __isset_bit_vector.set(__GID_ISSET_ID, value);
  }

  public int getPerm() {
    return this.perm;
  }

  public ClusterInfo setPerm(int perm) {
    this.perm = perm;
    setPermIsSet(true);
    return this;
  }

  public void unsetPerm() {
    __isset_bit_vector.clear(__PERM_ISSET_ID);
  }

  /** Returns true if field perm is set (has been assigned a value) and false otherwise */
  public boolean isSetPerm() {
    return __isset_bit_vector.get(__PERM_ISSET_ID);
  }

  public void setPermIsSet(boolean value) {
    __isset_bit_vector.set(__PERM_ISSET_ID, value);
  }

  public int getOptions() {
    return this.options;
  }

  public ClusterInfo setOptions(int options) {
    this.options = options;
    setOptionsIsSet(true);
    return this;
  }

  public void unsetOptions() {
    __isset_bit_vector.clear(__OPTIONS_ISSET_ID);
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return __isset_bit_vector.get(__OPTIONS_ISSET_ID);
  }

  public void setOptionsIsSet(boolean value) {
    __isset_bit_vector.set(__OPTIONS_ISSET_ID, value);
  }

  public String getMaster() {
    return this.master;
  }

  public ClusterInfo setMaster(String master) {
    this.master = master;
    return this;
  }

  public void unsetMaster() {
    this.master = null;
  }

  /** Returns true if field master is set (has been assigned a value) and false otherwise */
  public boolean isSetMaster() {
    return this.master != null;
  }

  public void setMasterIsSet(boolean value) {
    if (!value) {
      this.master = null;
    }
  }

  public int getCurrent() {
    return this.current;
  }

  public ClusterInfo setCurrent(int current) {
    this.current = current;
    setCurrentIsSet(true);
    return this;
  }

  public void unsetCurrent() {
    __isset_bit_vector.clear(__CURRENT_ISSET_ID);
  }

  /** Returns true if field current is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent() {
    return __isset_bit_vector.get(__CURRENT_ISSET_ID);
  }

  public void setCurrentIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENT_ISSET_ID, value);
  }

  public int getMaxpes() {
    return this.maxpes;
  }

  public ClusterInfo setMaxpes(int maxpes) {
    this.maxpes = maxpes;
    setMaxpesIsSet(true);
    return this;
  }

  public void unsetMaxpes() {
    __isset_bit_vector.clear(__MAXPES_ISSET_ID);
  }

  /** Returns true if field maxpes is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxpes() {
    return __isset_bit_vector.get(__MAXPES_ISSET_ID);
  }

  public void setMaxpesIsSet(boolean value) {
    __isset_bit_vector.set(__MAXPES_ISSET_ID, value);
  }

  public int getMaxnodes() {
    return this.maxnodes;
  }

  public ClusterInfo setMaxnodes(int maxnodes) {
    this.maxnodes = maxnodes;
    setMaxnodesIsSet(true);
    return this;
  }

  public void unsetMaxnodes() {
    __isset_bit_vector.clear(__MAXNODES_ISSET_ID);
  }

  /** Returns true if field maxnodes is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxnodes() {
    return __isset_bit_vector.get(__MAXNODES_ISSET_ID);
  }

  public void setMaxnodesIsSet(boolean value) {
    __isset_bit_vector.set(__MAXNODES_ISSET_ID, value);
  }

  public int getMaxaccsrs() {
    return this.maxaccsrs;
  }

  public ClusterInfo setMaxaccsrs(int maxaccsrs) {
    this.maxaccsrs = maxaccsrs;
    setMaxaccsrsIsSet(true);
    return this;
  }

  public void unsetMaxaccsrs() {
    __isset_bit_vector.clear(__MAXACCSRS_ISSET_ID);
  }

  /** Returns true if field maxaccsrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxaccsrs() {
    return __isset_bit_vector.get(__MAXACCSRS_ISSET_ID);
  }

  public void setMaxaccsrsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXACCSRS_ISSET_ID, value);
  }

  public int getMaxques() {
    return this.maxques;
  }

  public ClusterInfo setMaxques(int maxques) {
    this.maxques = maxques;
    setMaxquesIsSet(true);
    return this;
  }

  public void unsetMaxques() {
    __isset_bit_vector.clear(__MAXQUES_ISSET_ID);
  }

  /** Returns true if field maxques is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxques() {
    return __isset_bit_vector.get(__MAXQUES_ISSET_ID);
  }

  public void setMaxquesIsSet(boolean value) {
    __isset_bit_vector.set(__MAXQUES_ISSET_ID, value);
  }

  public int getMaxsgt() {
    return this.maxsgt;
  }

  public ClusterInfo setMaxsgt(int maxsgt) {
    this.maxsgt = maxsgt;
    setMaxsgtIsSet(true);
    return this;
  }

  public void unsetMaxsgt() {
    __isset_bit_vector.clear(__MAXSGT_ISSET_ID);
  }

  /** Returns true if field maxsgt is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxsgt() {
    return __isset_bit_vector.get(__MAXSGT_ISSET_ID);
  }

  public void setMaxsgtIsSet(boolean value) {
    __isset_bit_vector.set(__MAXSGT_ISSET_ID, value);
  }

  public int getMaxsvrs() {
    return this.maxsvrs;
  }

  public ClusterInfo setMaxsvrs(int maxsvrs) {
    this.maxsvrs = maxsvrs;
    setMaxsvrsIsSet(true);
    return this;
  }

  public void unsetMaxsvrs() {
    __isset_bit_vector.clear(__MAXSVRS_ISSET_ID);
  }

  /** Returns true if field maxsvrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxsvrs() {
    return __isset_bit_vector.get(__MAXSVRS_ISSET_ID);
  }

  public void setMaxsvrsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXSVRS_ISSET_ID, value);
  }

  public int getMaxsvcs() {
    return this.maxsvcs;
  }

  public ClusterInfo setMaxsvcs(int maxsvcs) {
    this.maxsvcs = maxsvcs;
    setMaxsvcsIsSet(true);
    return this;
  }

  public void unsetMaxsvcs() {
    __isset_bit_vector.clear(__MAXSVCS_ISSET_ID);
  }

  /** Returns true if field maxsvcs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxsvcs() {
    return __isset_bit_vector.get(__MAXSVCS_ISSET_ID);
  }

  public void setMaxsvcsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXSVCS_ISSET_ID, value);
  }

  public int getQuebkts() {
    return this.quebkts;
  }

  public ClusterInfo setQuebkts(int quebkts) {
    this.quebkts = quebkts;
    setQuebktsIsSet(true);
    return this;
  }

  public void unsetQuebkts() {
    __isset_bit_vector.clear(__QUEBKTS_ISSET_ID);
  }

  /** Returns true if field quebkts is set (has been assigned a value) and false otherwise */
  public boolean isSetQuebkts() {
    return __isset_bit_vector.get(__QUEBKTS_ISSET_ID);
  }

  public void setQuebktsIsSet(boolean value) {
    __isset_bit_vector.set(__QUEBKTS_ISSET_ID, value);
  }

  public int getSgtbkts() {
    return this.sgtbkts;
  }

  public ClusterInfo setSgtbkts(int sgtbkts) {
    this.sgtbkts = sgtbkts;
    setSgtbktsIsSet(true);
    return this;
  }

  public void unsetSgtbkts() {
    __isset_bit_vector.clear(__SGTBKTS_ISSET_ID);
  }

  /** Returns true if field sgtbkts is set (has been assigned a value) and false otherwise */
  public boolean isSetSgtbkts() {
    return __isset_bit_vector.get(__SGTBKTS_ISSET_ID);
  }

  public void setSgtbktsIsSet(boolean value) {
    __isset_bit_vector.set(__SGTBKTS_ISSET_ID, value);
  }

  public int getSvrbkts() {
    return this.svrbkts;
  }

  public ClusterInfo setSvrbkts(int svrbkts) {
    this.svrbkts = svrbkts;
    setSvrbktsIsSet(true);
    return this;
  }

  public void unsetSvrbkts() {
    __isset_bit_vector.clear(__SVRBKTS_ISSET_ID);
  }

  /** Returns true if field svrbkts is set (has been assigned a value) and false otherwise */
  public boolean isSetSvrbkts() {
    return __isset_bit_vector.get(__SVRBKTS_ISSET_ID);
  }

  public void setSvrbktsIsSet(boolean value) {
    __isset_bit_vector.set(__SVRBKTS_ISSET_ID, value);
  }

  public int getSvcbkts() {
    return this.svcbkts;
  }

  public ClusterInfo setSvcbkts(int svcbkts) {
    this.svcbkts = svcbkts;
    setSvcbktsIsSet(true);
    return this;
  }

  public void unsetSvcbkts() {
    __isset_bit_vector.clear(__SVCBKTS_ISSET_ID);
  }

  /** Returns true if field svcbkts is set (has been assigned a value) and false otherwise */
  public boolean isSetSvcbkts() {
    return __isset_bit_vector.get(__SVCBKTS_ISSET_ID);
  }

  public void setSvcbktsIsSet(boolean value) {
    __isset_bit_vector.set(__SVCBKTS_ISSET_ID, value);
  }

  public int getScan_unit() {
    return this.scan_unit;
  }

  public ClusterInfo setScan_unit(int scan_unit) {
    this.scan_unit = scan_unit;
    setScan_unitIsSet(true);
    return this;
  }

  public void unsetScan_unit() {
    __isset_bit_vector.clear(__SCAN_UNIT_ISSET_ID);
  }

  /** Returns true if field scan_unit is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_unit() {
    return __isset_bit_vector.get(__SCAN_UNIT_ISSET_ID);
  }

  public void setScan_unitIsSet(boolean value) {
    __isset_bit_vector.set(__SCAN_UNIT_ISSET_ID, value);
  }

  public int getSanity_scan() {
    return this.sanity_scan;
  }

  public ClusterInfo setSanity_scan(int sanity_scan) {
    this.sanity_scan = sanity_scan;
    setSanity_scanIsSet(true);
    return this;
  }

  public void unsetSanity_scan() {
    __isset_bit_vector.clear(__SANITY_SCAN_ISSET_ID);
  }

  /** Returns true if field sanity_scan is set (has been assigned a value) and false otherwise */
  public boolean isSetSanity_scan() {
    return __isset_bit_vector.get(__SANITY_SCAN_ISSET_ID);
  }

  public void setSanity_scanIsSet(boolean value) {
    __isset_bit_vector.set(__SANITY_SCAN_ISSET_ID, value);
  }

  public int getStack_size() {
    return this.stack_size;
  }

  public ClusterInfo setStack_size(int stack_size) {
    this.stack_size = stack_size;
    setStack_sizeIsSet(true);
    return this;
  }

  public void unsetStack_size() {
    __isset_bit_vector.clear(__STACK_SIZE_ISSET_ID);
  }

  /** Returns true if field stack_size is set (has been assigned a value) and false otherwise */
  public boolean isSetStack_size() {
    return __isset_bit_vector.get(__STACK_SIZE_ISSET_ID);
  }

  public void setStack_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__STACK_SIZE_ISSET_ID, value);
  }

  public long getMax_num_msg() {
    return this.max_num_msg;
  }

  public ClusterInfo setMax_num_msg(long max_num_msg) {
    this.max_num_msg = max_num_msg;
    setMax_num_msgIsSet(true);
    return this;
  }

  public void unsetMax_num_msg() {
    __isset_bit_vector.clear(__MAX_NUM_MSG_ISSET_ID);
  }

  /** Returns true if field max_num_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_num_msg() {
    return __isset_bit_vector.get(__MAX_NUM_MSG_ISSET_ID);
  }

  public void setMax_num_msgIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_NUM_MSG_ISSET_ID, value);
  }

  public long getMax_msg_size() {
    return this.max_msg_size;
  }

  public ClusterInfo setMax_msg_size(long max_msg_size) {
    this.max_msg_size = max_msg_size;
    setMax_msg_sizeIsSet(true);
    return this;
  }

  public void unsetMax_msg_size() {
    __isset_bit_vector.clear(__MAX_MSG_SIZE_ISSET_ID);
  }

  /** Returns true if field max_msg_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_msg_size() {
    return __isset_bit_vector.get(__MAX_MSG_SIZE_ISSET_ID);
  }

  public void setMax_msg_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_MSG_SIZE_ISSET_ID, value);
  }

  public long getBlock_time() {
    return this.block_time;
  }

  public ClusterInfo setBlock_time(long block_time) {
    this.block_time = block_time;
    setBlock_timeIsSet(true);
    return this;
  }

  public void unsetBlock_time() {
    __isset_bit_vector.clear(__BLOCK_TIME_ISSET_ID);
  }

  /** Returns true if field block_time is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock_time() {
    return __isset_bit_vector.get(__BLOCK_TIME_ISSET_ID);
  }

  public void setBlock_timeIsSet(boolean value) {
    __isset_bit_vector.set(__BLOCK_TIME_ISSET_ID, value);
  }

  public long getDbbm_wait() {
    return this.dbbm_wait;
  }

  public ClusterInfo setDbbm_wait(long dbbm_wait) {
    this.dbbm_wait = dbbm_wait;
    setDbbm_waitIsSet(true);
    return this;
  }

  public void unsetDbbm_wait() {
    __isset_bit_vector.clear(__DBBM_WAIT_ISSET_ID);
  }

  /** Returns true if field dbbm_wait is set (has been assigned a value) and false otherwise */
  public boolean isSetDbbm_wait() {
    return __isset_bit_vector.get(__DBBM_WAIT_ISSET_ID);
  }

  public void setDbbm_waitIsSet(boolean value) {
    __isset_bit_vector.set(__DBBM_WAIT_ISSET_ID, value);
  }

  public long getBbm_query() {
    return this.bbm_query;
  }

  public ClusterInfo setBbm_query(long bbm_query) {
    this.bbm_query = bbm_query;
    setBbm_queryIsSet(true);
    return this;
  }

  public void unsetBbm_query() {
    __isset_bit_vector.clear(__BBM_QUERY_ISSET_ID);
  }

  /** Returns true if field bbm_query is set (has been assigned a value) and false otherwise */
  public boolean isSetBbm_query() {
    return __isset_bit_vector.get(__BBM_QUERY_ISSET_ID);
  }

  public void setBbm_queryIsSet(boolean value) {
    __isset_bit_vector.set(__BBM_QUERY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IPCKEY:
      if (value == null) {
        unsetIpckey();
      } else {
        setIpckey((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case GID:
      if (value == null) {
        unsetGid();
      } else {
        setGid((Integer)value);
      }
      break;

    case PERM:
      if (value == null) {
        unsetPerm();
      } else {
        setPerm((Integer)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((Integer)value);
      }
      break;

    case MASTER:
      if (value == null) {
        unsetMaster();
      } else {
        setMaster((String)value);
      }
      break;

    case CURRENT:
      if (value == null) {
        unsetCurrent();
      } else {
        setCurrent((Integer)value);
      }
      break;

    case MAXPES:
      if (value == null) {
        unsetMaxpes();
      } else {
        setMaxpes((Integer)value);
      }
      break;

    case MAXNODES:
      if (value == null) {
        unsetMaxnodes();
      } else {
        setMaxnodes((Integer)value);
      }
      break;

    case MAXACCSRS:
      if (value == null) {
        unsetMaxaccsrs();
      } else {
        setMaxaccsrs((Integer)value);
      }
      break;

    case MAXQUES:
      if (value == null) {
        unsetMaxques();
      } else {
        setMaxques((Integer)value);
      }
      break;

    case MAXSGT:
      if (value == null) {
        unsetMaxsgt();
      } else {
        setMaxsgt((Integer)value);
      }
      break;

    case MAXSVRS:
      if (value == null) {
        unsetMaxsvrs();
      } else {
        setMaxsvrs((Integer)value);
      }
      break;

    case MAXSVCS:
      if (value == null) {
        unsetMaxsvcs();
      } else {
        setMaxsvcs((Integer)value);
      }
      break;

    case QUEBKTS:
      if (value == null) {
        unsetQuebkts();
      } else {
        setQuebkts((Integer)value);
      }
      break;

    case SGTBKTS:
      if (value == null) {
        unsetSgtbkts();
      } else {
        setSgtbkts((Integer)value);
      }
      break;

    case SVRBKTS:
      if (value == null) {
        unsetSvrbkts();
      } else {
        setSvrbkts((Integer)value);
      }
      break;

    case SVCBKTS:
      if (value == null) {
        unsetSvcbkts();
      } else {
        setSvcbkts((Integer)value);
      }
      break;

    case SCAN_UNIT:
      if (value == null) {
        unsetScan_unit();
      } else {
        setScan_unit((Integer)value);
      }
      break;

    case SANITY_SCAN:
      if (value == null) {
        unsetSanity_scan();
      } else {
        setSanity_scan((Integer)value);
      }
      break;

    case STACK_SIZE:
      if (value == null) {
        unsetStack_size();
      } else {
        setStack_size((Integer)value);
      }
      break;

    case MAX_NUM_MSG:
      if (value == null) {
        unsetMax_num_msg();
      } else {
        setMax_num_msg((Long)value);
      }
      break;

    case MAX_MSG_SIZE:
      if (value == null) {
        unsetMax_msg_size();
      } else {
        setMax_msg_size((Long)value);
      }
      break;

    case BLOCK_TIME:
      if (value == null) {
        unsetBlock_time();
      } else {
        setBlock_time((Long)value);
      }
      break;

    case DBBM_WAIT:
      if (value == null) {
        unsetDbbm_wait();
      } else {
        setDbbm_wait((Long)value);
      }
      break;

    case BBM_QUERY:
      if (value == null) {
        unsetBbm_query();
      } else {
        setBbm_query((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IPCKEY:
      return Integer.valueOf(getIpckey());

    case UID:
      return Integer.valueOf(getUid());

    case GID:
      return Integer.valueOf(getGid());

    case PERM:
      return Integer.valueOf(getPerm());

    case OPTIONS:
      return Integer.valueOf(getOptions());

    case MASTER:
      return getMaster();

    case CURRENT:
      return Integer.valueOf(getCurrent());

    case MAXPES:
      return Integer.valueOf(getMaxpes());

    case MAXNODES:
      return Integer.valueOf(getMaxnodes());

    case MAXACCSRS:
      return Integer.valueOf(getMaxaccsrs());

    case MAXQUES:
      return Integer.valueOf(getMaxques());

    case MAXSGT:
      return Integer.valueOf(getMaxsgt());

    case MAXSVRS:
      return Integer.valueOf(getMaxsvrs());

    case MAXSVCS:
      return Integer.valueOf(getMaxsvcs());

    case QUEBKTS:
      return Integer.valueOf(getQuebkts());

    case SGTBKTS:
      return Integer.valueOf(getSgtbkts());

    case SVRBKTS:
      return Integer.valueOf(getSvrbkts());

    case SVCBKTS:
      return Integer.valueOf(getSvcbkts());

    case SCAN_UNIT:
      return Integer.valueOf(getScan_unit());

    case SANITY_SCAN:
      return Integer.valueOf(getSanity_scan());

    case STACK_SIZE:
      return Integer.valueOf(getStack_size());

    case MAX_NUM_MSG:
      return Long.valueOf(getMax_num_msg());

    case MAX_MSG_SIZE:
      return Long.valueOf(getMax_msg_size());

    case BLOCK_TIME:
      return Long.valueOf(getBlock_time());

    case DBBM_WAIT:
      return Long.valueOf(getDbbm_wait());

    case BBM_QUERY:
      return Long.valueOf(getBbm_query());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IPCKEY:
      return isSetIpckey();
    case UID:
      return isSetUid();
    case GID:
      return isSetGid();
    case PERM:
      return isSetPerm();
    case OPTIONS:
      return isSetOptions();
    case MASTER:
      return isSetMaster();
    case CURRENT:
      return isSetCurrent();
    case MAXPES:
      return isSetMaxpes();
    case MAXNODES:
      return isSetMaxnodes();
    case MAXACCSRS:
      return isSetMaxaccsrs();
    case MAXQUES:
      return isSetMaxques();
    case MAXSGT:
      return isSetMaxsgt();
    case MAXSVRS:
      return isSetMaxsvrs();
    case MAXSVCS:
      return isSetMaxsvcs();
    case QUEBKTS:
      return isSetQuebkts();
    case SGTBKTS:
      return isSetSgtbkts();
    case SVRBKTS:
      return isSetSvrbkts();
    case SVCBKTS:
      return isSetSvcbkts();
    case SCAN_UNIT:
      return isSetScan_unit();
    case SANITY_SCAN:
      return isSetSanity_scan();
    case STACK_SIZE:
      return isSetStack_size();
    case MAX_NUM_MSG:
      return isSetMax_num_msg();
    case MAX_MSG_SIZE:
      return isSetMax_msg_size();
    case BLOCK_TIME:
      return isSetBlock_time();
    case DBBM_WAIT:
      return isSetDbbm_wait();
    case BBM_QUERY:
      return isSetBbm_query();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClusterInfo)
      return this.equals((ClusterInfo)that);
    return false;
  }

  public boolean equals(ClusterInfo that) {
    if (that == null)
      return false;

    boolean this_present_ipckey = true;
    boolean that_present_ipckey = true;
    if (this_present_ipckey || that_present_ipckey) {
      if (!(this_present_ipckey && that_present_ipckey))
        return false;
      if (this.ipckey != that.ipckey)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_gid = true;
    boolean that_present_gid = true;
    if (this_present_gid || that_present_gid) {
      if (!(this_present_gid && that_present_gid))
        return false;
      if (this.gid != that.gid)
        return false;
    }

    boolean this_present_perm = true;
    boolean that_present_perm = true;
    if (this_present_perm || that_present_perm) {
      if (!(this_present_perm && that_present_perm))
        return false;
      if (this.perm != that.perm)
        return false;
    }

    boolean this_present_options = true;
    boolean that_present_options = true;
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (this.options != that.options)
        return false;
    }

    boolean this_present_master = true && this.isSetMaster();
    boolean that_present_master = true && that.isSetMaster();
    if (this_present_master || that_present_master) {
      if (!(this_present_master && that_present_master))
        return false;
      if (!this.master.equals(that.master))
        return false;
    }

    boolean this_present_current = true;
    boolean that_present_current = true;
    if (this_present_current || that_present_current) {
      if (!(this_present_current && that_present_current))
        return false;
      if (this.current != that.current)
        return false;
    }

    boolean this_present_maxpes = true;
    boolean that_present_maxpes = true;
    if (this_present_maxpes || that_present_maxpes) {
      if (!(this_present_maxpes && that_present_maxpes))
        return false;
      if (this.maxpes != that.maxpes)
        return false;
    }

    boolean this_present_maxnodes = true;
    boolean that_present_maxnodes = true;
    if (this_present_maxnodes || that_present_maxnodes) {
      if (!(this_present_maxnodes && that_present_maxnodes))
        return false;
      if (this.maxnodes != that.maxnodes)
        return false;
    }

    boolean this_present_maxaccsrs = true;
    boolean that_present_maxaccsrs = true;
    if (this_present_maxaccsrs || that_present_maxaccsrs) {
      if (!(this_present_maxaccsrs && that_present_maxaccsrs))
        return false;
      if (this.maxaccsrs != that.maxaccsrs)
        return false;
    }

    boolean this_present_maxques = true;
    boolean that_present_maxques = true;
    if (this_present_maxques || that_present_maxques) {
      if (!(this_present_maxques && that_present_maxques))
        return false;
      if (this.maxques != that.maxques)
        return false;
    }

    boolean this_present_maxsgt = true;
    boolean that_present_maxsgt = true;
    if (this_present_maxsgt || that_present_maxsgt) {
      if (!(this_present_maxsgt && that_present_maxsgt))
        return false;
      if (this.maxsgt != that.maxsgt)
        return false;
    }

    boolean this_present_maxsvrs = true;
    boolean that_present_maxsvrs = true;
    if (this_present_maxsvrs || that_present_maxsvrs) {
      if (!(this_present_maxsvrs && that_present_maxsvrs))
        return false;
      if (this.maxsvrs != that.maxsvrs)
        return false;
    }

    boolean this_present_maxsvcs = true;
    boolean that_present_maxsvcs = true;
    if (this_present_maxsvcs || that_present_maxsvcs) {
      if (!(this_present_maxsvcs && that_present_maxsvcs))
        return false;
      if (this.maxsvcs != that.maxsvcs)
        return false;
    }

    boolean this_present_quebkts = true;
    boolean that_present_quebkts = true;
    if (this_present_quebkts || that_present_quebkts) {
      if (!(this_present_quebkts && that_present_quebkts))
        return false;
      if (this.quebkts != that.quebkts)
        return false;
    }

    boolean this_present_sgtbkts = true;
    boolean that_present_sgtbkts = true;
    if (this_present_sgtbkts || that_present_sgtbkts) {
      if (!(this_present_sgtbkts && that_present_sgtbkts))
        return false;
      if (this.sgtbkts != that.sgtbkts)
        return false;
    }

    boolean this_present_svrbkts = true;
    boolean that_present_svrbkts = true;
    if (this_present_svrbkts || that_present_svrbkts) {
      if (!(this_present_svrbkts && that_present_svrbkts))
        return false;
      if (this.svrbkts != that.svrbkts)
        return false;
    }

    boolean this_present_svcbkts = true;
    boolean that_present_svcbkts = true;
    if (this_present_svcbkts || that_present_svcbkts) {
      if (!(this_present_svcbkts && that_present_svcbkts))
        return false;
      if (this.svcbkts != that.svcbkts)
        return false;
    }

    boolean this_present_scan_unit = true;
    boolean that_present_scan_unit = true;
    if (this_present_scan_unit || that_present_scan_unit) {
      if (!(this_present_scan_unit && that_present_scan_unit))
        return false;
      if (this.scan_unit != that.scan_unit)
        return false;
    }

    boolean this_present_sanity_scan = true;
    boolean that_present_sanity_scan = true;
    if (this_present_sanity_scan || that_present_sanity_scan) {
      if (!(this_present_sanity_scan && that_present_sanity_scan))
        return false;
      if (this.sanity_scan != that.sanity_scan)
        return false;
    }

    boolean this_present_stack_size = true;
    boolean that_present_stack_size = true;
    if (this_present_stack_size || that_present_stack_size) {
      if (!(this_present_stack_size && that_present_stack_size))
        return false;
      if (this.stack_size != that.stack_size)
        return false;
    }

    boolean this_present_max_num_msg = true;
    boolean that_present_max_num_msg = true;
    if (this_present_max_num_msg || that_present_max_num_msg) {
      if (!(this_present_max_num_msg && that_present_max_num_msg))
        return false;
      if (this.max_num_msg != that.max_num_msg)
        return false;
    }

    boolean this_present_max_msg_size = true;
    boolean that_present_max_msg_size = true;
    if (this_present_max_msg_size || that_present_max_msg_size) {
      if (!(this_present_max_msg_size && that_present_max_msg_size))
        return false;
      if (this.max_msg_size != that.max_msg_size)
        return false;
    }

    boolean this_present_block_time = true;
    boolean that_present_block_time = true;
    if (this_present_block_time || that_present_block_time) {
      if (!(this_present_block_time && that_present_block_time))
        return false;
      if (this.block_time != that.block_time)
        return false;
    }

    boolean this_present_dbbm_wait = true;
    boolean that_present_dbbm_wait = true;
    if (this_present_dbbm_wait || that_present_dbbm_wait) {
      if (!(this_present_dbbm_wait && that_present_dbbm_wait))
        return false;
      if (this.dbbm_wait != that.dbbm_wait)
        return false;
    }

    boolean this_present_bbm_query = true;
    boolean that_present_bbm_query = true;
    if (this_present_bbm_query || that_present_bbm_query) {
      if (!(this_present_bbm_query && that_present_bbm_query))
        return false;
      if (this.bbm_query != that.bbm_query)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ClusterInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ClusterInfo typedOther = (ClusterInfo)other;

    lastComparison = Boolean.valueOf(isSetIpckey()).compareTo(typedOther.isSetIpckey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpckey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipckey, typedOther.ipckey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGid()).compareTo(typedOther.isSetGid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, typedOther.gid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(typedOther.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, typedOther.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaster()).compareTo(typedOther.isSetMaster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.master, typedOther.master);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent()).compareTo(typedOther.isSetCurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current, typedOther.current);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxpes()).compareTo(typedOther.isSetMaxpes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxpes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxpes, typedOther.maxpes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxnodes()).compareTo(typedOther.isSetMaxnodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxnodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxnodes, typedOther.maxnodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxaccsrs()).compareTo(typedOther.isSetMaxaccsrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxaccsrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxaccsrs, typedOther.maxaccsrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxques()).compareTo(typedOther.isSetMaxques());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxques()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxques, typedOther.maxques);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxsgt()).compareTo(typedOther.isSetMaxsgt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxsgt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxsgt, typedOther.maxsgt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxsvrs()).compareTo(typedOther.isSetMaxsvrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxsvrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxsvrs, typedOther.maxsvrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxsvcs()).compareTo(typedOther.isSetMaxsvcs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxsvcs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxsvcs, typedOther.maxsvcs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuebkts()).compareTo(typedOther.isSetQuebkts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuebkts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quebkts, typedOther.quebkts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSgtbkts()).compareTo(typedOther.isSetSgtbkts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgtbkts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgtbkts, typedOther.sgtbkts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvrbkts()).compareTo(typedOther.isSetSvrbkts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvrbkts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svrbkts, typedOther.svrbkts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvcbkts()).compareTo(typedOther.isSetSvcbkts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvcbkts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svcbkts, typedOther.svcbkts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScan_unit()).compareTo(typedOther.isSetScan_unit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_unit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_unit, typedOther.scan_unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSanity_scan()).compareTo(typedOther.isSetSanity_scan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSanity_scan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sanity_scan, typedOther.sanity_scan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStack_size()).compareTo(typedOther.isSetStack_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStack_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stack_size, typedOther.stack_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_num_msg()).compareTo(typedOther.isSetMax_num_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_num_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_num_msg, typedOther.max_num_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_msg_size()).compareTo(typedOther.isSetMax_msg_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_msg_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_msg_size, typedOther.max_msg_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlock_time()).compareTo(typedOther.isSetBlock_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_time, typedOther.block_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbbm_wait()).compareTo(typedOther.isSetDbbm_wait());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbbm_wait()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbbm_wait, typedOther.dbbm_wait);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBbm_query()).compareTo(typedOther.isSetBbm_query());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBbm_query()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bbm_query, typedOther.bbm_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClusterInfo(");
    boolean first = true;

    sb.append("ipckey:");
    sb.append(this.ipckey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gid:");
    sb.append(this.gid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perm:");
    sb.append(this.perm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    sb.append(this.options);
    first = false;
    if (!first) sb.append(", ");
    sb.append("master:");
    if (this.master == null) {
      sb.append("null");
    } else {
      sb.append(this.master);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("current:");
    sb.append(this.current);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxpes:");
    sb.append(this.maxpes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxnodes:");
    sb.append(this.maxnodes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxaccsrs:");
    sb.append(this.maxaccsrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxques:");
    sb.append(this.maxques);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxsgt:");
    sb.append(this.maxsgt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxsvrs:");
    sb.append(this.maxsvrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxsvcs:");
    sb.append(this.maxsvcs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quebkts:");
    sb.append(this.quebkts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sgtbkts:");
    sb.append(this.sgtbkts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("svrbkts:");
    sb.append(this.svrbkts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("svcbkts:");
    sb.append(this.svcbkts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scan_unit:");
    sb.append(this.scan_unit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sanity_scan:");
    sb.append(this.sanity_scan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stack_size:");
    sb.append(this.stack_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_num_msg:");
    sb.append(this.max_num_msg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_msg_size:");
    sb.append(this.max_msg_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("block_time:");
    sb.append(this.block_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbbm_wait:");
    sb.append(this.dbbm_wait);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bbm_query:");
    sb.append(this.bbm_query);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClusterInfoStandardSchemeFactory implements SchemeFactory {
    public ClusterInfoStandardScheme getScheme() {
      return new ClusterInfoStandardScheme();
    }
  }

  private static class ClusterInfoStandardScheme extends StandardScheme<ClusterInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClusterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IPCKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipckey = iprot.readI32();
              struct.setIpckeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gid = iprot.readI32();
              struct.setGidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perm = iprot.readI32();
              struct.setPermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.options = iprot.readI32();
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MASTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.master = iprot.readString();
              struct.setMasterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.current = iprot.readI32();
              struct.setCurrentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAXPES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxpes = iprot.readI32();
              struct.setMaxpesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAXNODES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxnodes = iprot.readI32();
              struct.setMaxnodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAXACCSRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxaccsrs = iprot.readI32();
              struct.setMaxaccsrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAXQUES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxques = iprot.readI32();
              struct.setMaxquesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAXSGT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxsgt = iprot.readI32();
              struct.setMaxsgtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAXSVRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxsvrs = iprot.readI32();
              struct.setMaxsvrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MAXSVCS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxsvcs = iprot.readI32();
              struct.setMaxsvcsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // QUEBKTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quebkts = iprot.readI32();
              struct.setQuebktsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SGTBKTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sgtbkts = iprot.readI32();
              struct.setSgtbktsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SVRBKTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.svrbkts = iprot.readI32();
              struct.setSvrbktsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SVCBKTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.svcbkts = iprot.readI32();
              struct.setSvcbktsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SCAN_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scan_unit = iprot.readI32();
              struct.setScan_unitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SANITY_SCAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sanity_scan = iprot.readI32();
              struct.setSanity_scanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // STACK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stack_size = iprot.readI32();
              struct.setStack_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MAX_NUM_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_num_msg = iprot.readI64();
              struct.setMax_num_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MAX_MSG_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_msg_size = iprot.readI64();
              struct.setMax_msg_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BLOCK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.block_time = iprot.readI64();
              struct.setBlock_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DBBM_WAIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dbbm_wait = iprot.readI64();
              struct.setDbbm_waitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BBM_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bbm_query = iprot.readI64();
              struct.setBbm_queryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClusterInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IPCKEY_FIELD_DESC);
      oprot.writeI32(struct.ipckey);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GID_FIELD_DESC);
      oprot.writeI32(struct.gid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERM_FIELD_DESC);
      oprot.writeI32(struct.perm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
      oprot.writeI32(struct.options);
      oprot.writeFieldEnd();
      if (struct.master != null) {
        oprot.writeFieldBegin(MASTER_FIELD_DESC);
        oprot.writeString(struct.master);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENT_FIELD_DESC);
      oprot.writeI32(struct.current);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXPES_FIELD_DESC);
      oprot.writeI32(struct.maxpes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXNODES_FIELD_DESC);
      oprot.writeI32(struct.maxnodes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXACCSRS_FIELD_DESC);
      oprot.writeI32(struct.maxaccsrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXQUES_FIELD_DESC);
      oprot.writeI32(struct.maxques);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXSGT_FIELD_DESC);
      oprot.writeI32(struct.maxsgt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXSVRS_FIELD_DESC);
      oprot.writeI32(struct.maxsvrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXSVCS_FIELD_DESC);
      oprot.writeI32(struct.maxsvcs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEBKTS_FIELD_DESC);
      oprot.writeI32(struct.quebkts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SGTBKTS_FIELD_DESC);
      oprot.writeI32(struct.sgtbkts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SVRBKTS_FIELD_DESC);
      oprot.writeI32(struct.svrbkts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SVCBKTS_FIELD_DESC);
      oprot.writeI32(struct.svcbkts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCAN_UNIT_FIELD_DESC);
      oprot.writeI32(struct.scan_unit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SANITY_SCAN_FIELD_DESC);
      oprot.writeI32(struct.sanity_scan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STACK_SIZE_FIELD_DESC);
      oprot.writeI32(struct.stack_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NUM_MSG_FIELD_DESC);
      oprot.writeI64(struct.max_num_msg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_MSG_SIZE_FIELD_DESC);
      oprot.writeI64(struct.max_msg_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_TIME_FIELD_DESC);
      oprot.writeI64(struct.block_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DBBM_WAIT_FIELD_DESC);
      oprot.writeI64(struct.dbbm_wait);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BBM_QUERY_FIELD_DESC);
      oprot.writeI64(struct.bbm_query);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClusterInfoTupleSchemeFactory implements SchemeFactory {
    public ClusterInfoTupleScheme getScheme() {
      return new ClusterInfoTupleScheme();
    }
  }

  private static class ClusterInfoTupleScheme extends TupleScheme<ClusterInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClusterInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIpckey()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetGid()) {
        optionals.set(2);
      }
      if (struct.isSetPerm()) {
        optionals.set(3);
      }
      if (struct.isSetOptions()) {
        optionals.set(4);
      }
      if (struct.isSetMaster()) {
        optionals.set(5);
      }
      if (struct.isSetCurrent()) {
        optionals.set(6);
      }
      if (struct.isSetMaxpes()) {
        optionals.set(7);
      }
      if (struct.isSetMaxnodes()) {
        optionals.set(8);
      }
      if (struct.isSetMaxaccsrs()) {
        optionals.set(9);
      }
      if (struct.isSetMaxques()) {
        optionals.set(10);
      }
      if (struct.isSetMaxsgt()) {
        optionals.set(11);
      }
      if (struct.isSetMaxsvrs()) {
        optionals.set(12);
      }
      if (struct.isSetMaxsvcs()) {
        optionals.set(13);
      }
      if (struct.isSetQuebkts()) {
        optionals.set(14);
      }
      if (struct.isSetSgtbkts()) {
        optionals.set(15);
      }
      if (struct.isSetSvrbkts()) {
        optionals.set(16);
      }
      if (struct.isSetSvcbkts()) {
        optionals.set(17);
      }
      if (struct.isSetScan_unit()) {
        optionals.set(18);
      }
      if (struct.isSetSanity_scan()) {
        optionals.set(19);
      }
      if (struct.isSetStack_size()) {
        optionals.set(20);
      }
      if (struct.isSetMax_num_msg()) {
        optionals.set(21);
      }
      if (struct.isSetMax_msg_size()) {
        optionals.set(22);
      }
      if (struct.isSetBlock_time()) {
        optionals.set(23);
      }
      if (struct.isSetDbbm_wait()) {
        optionals.set(24);
      }
      if (struct.isSetBbm_query()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetIpckey()) {
        oprot.writeI32(struct.ipckey);
      }
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetGid()) {
        oprot.writeI32(struct.gid);
      }
      if (struct.isSetPerm()) {
        oprot.writeI32(struct.perm);
      }
      if (struct.isSetOptions()) {
        oprot.writeI32(struct.options);
      }
      if (struct.isSetMaster()) {
        oprot.writeString(struct.master);
      }
      if (struct.isSetCurrent()) {
        oprot.writeI32(struct.current);
      }
      if (struct.isSetMaxpes()) {
        oprot.writeI32(struct.maxpes);
      }
      if (struct.isSetMaxnodes()) {
        oprot.writeI32(struct.maxnodes);
      }
      if (struct.isSetMaxaccsrs()) {
        oprot.writeI32(struct.maxaccsrs);
      }
      if (struct.isSetMaxques()) {
        oprot.writeI32(struct.maxques);
      }
      if (struct.isSetMaxsgt()) {
        oprot.writeI32(struct.maxsgt);
      }
      if (struct.isSetMaxsvrs()) {
        oprot.writeI32(struct.maxsvrs);
      }
      if (struct.isSetMaxsvcs()) {
        oprot.writeI32(struct.maxsvcs);
      }
      if (struct.isSetQuebkts()) {
        oprot.writeI32(struct.quebkts);
      }
      if (struct.isSetSgtbkts()) {
        oprot.writeI32(struct.sgtbkts);
      }
      if (struct.isSetSvrbkts()) {
        oprot.writeI32(struct.svrbkts);
      }
      if (struct.isSetSvcbkts()) {
        oprot.writeI32(struct.svcbkts);
      }
      if (struct.isSetScan_unit()) {
        oprot.writeI32(struct.scan_unit);
      }
      if (struct.isSetSanity_scan()) {
        oprot.writeI32(struct.sanity_scan);
      }
      if (struct.isSetStack_size()) {
        oprot.writeI32(struct.stack_size);
      }
      if (struct.isSetMax_num_msg()) {
        oprot.writeI64(struct.max_num_msg);
      }
      if (struct.isSetMax_msg_size()) {
        oprot.writeI64(struct.max_msg_size);
      }
      if (struct.isSetBlock_time()) {
        oprot.writeI64(struct.block_time);
      }
      if (struct.isSetDbbm_wait()) {
        oprot.writeI64(struct.dbbm_wait);
      }
      if (struct.isSetBbm_query()) {
        oprot.writeI64(struct.bbm_query);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClusterInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.ipckey = iprot.readI32();
        struct.setIpckeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gid = iprot.readI32();
        struct.setGidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.perm = iprot.readI32();
        struct.setPermIsSet(true);
      }
      if (incoming.get(4)) {
        struct.options = iprot.readI32();
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.master = iprot.readString();
        struct.setMasterIsSet(true);
      }
      if (incoming.get(6)) {
        struct.current = iprot.readI32();
        struct.setCurrentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxpes = iprot.readI32();
        struct.setMaxpesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maxnodes = iprot.readI32();
        struct.setMaxnodesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.maxaccsrs = iprot.readI32();
        struct.setMaxaccsrsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxques = iprot.readI32();
        struct.setMaxquesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maxsgt = iprot.readI32();
        struct.setMaxsgtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.maxsvrs = iprot.readI32();
        struct.setMaxsvrsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.maxsvcs = iprot.readI32();
        struct.setMaxsvcsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.quebkts = iprot.readI32();
        struct.setQuebktsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.sgtbkts = iprot.readI32();
        struct.setSgtbktsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.svrbkts = iprot.readI32();
        struct.setSvrbktsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.svcbkts = iprot.readI32();
        struct.setSvcbktsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.scan_unit = iprot.readI32();
        struct.setScan_unitIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sanity_scan = iprot.readI32();
        struct.setSanity_scanIsSet(true);
      }
      if (incoming.get(20)) {
        struct.stack_size = iprot.readI32();
        struct.setStack_sizeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.max_num_msg = iprot.readI64();
        struct.setMax_num_msgIsSet(true);
      }
      if (incoming.get(22)) {
        struct.max_msg_size = iprot.readI64();
        struct.setMax_msg_sizeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.block_time = iprot.readI64();
        struct.setBlock_timeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.dbbm_wait = iprot.readI64();
        struct.setDbbm_waitIsSet(true);
      }
      if (incoming.get(25)) {
        struct.bbm_query = iprot.readI64();
        struct.setBbm_queryIsSet(true);
      }
    }
  }

}

