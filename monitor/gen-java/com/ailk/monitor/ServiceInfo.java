/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServiceInfo implements org.apache.thrift.TBase<ServiceInfo, ServiceInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceInfo");

  private static final org.apache.thrift.protocol.TField SGID_FIELD_DESC = new org.apache.thrift.protocol.TField("sgid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GRPID_FIELD_DESC = new org.apache.thrift.protocol.TField("grpid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SVC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("svc_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SVC_CNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("svc_cname", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SVC_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("svc_index", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SVC_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("svc_load", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LOAD_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("load_limit", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SVCTIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("svctimeout", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SVCBLKTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("svcblktime", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceInfoTupleSchemeFactory());
  }

  public long sgid; // required
  public int grpid; // required
  public int serverid; // required
  public int priority; // required
  public String svc_name; // required
  public String svc_cname; // required
  public int svc_index; // required
  public int svc_load; // required
  public int load_limit; // required
  public long svctimeout; // required
  public long svcblktime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SGID((short)1, "sgid"),
    GRPID((short)2, "grpid"),
    SERVERID((short)4, "serverid"),
    PRIORITY((short)5, "priority"),
    SVC_NAME((short)6, "svc_name"),
    SVC_CNAME((short)7, "svc_cname"),
    SVC_INDEX((short)8, "svc_index"),
    SVC_LOAD((short)9, "svc_load"),
    LOAD_LIMIT((short)10, "load_limit"),
    SVCTIMEOUT((short)11, "svctimeout"),
    SVCBLKTIME((short)12, "svcblktime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SGID
          return SGID;
        case 2: // GRPID
          return GRPID;
        case 4: // SERVERID
          return SERVERID;
        case 5: // PRIORITY
          return PRIORITY;
        case 6: // SVC_NAME
          return SVC_NAME;
        case 7: // SVC_CNAME
          return SVC_CNAME;
        case 8: // SVC_INDEX
          return SVC_INDEX;
        case 9: // SVC_LOAD
          return SVC_LOAD;
        case 10: // LOAD_LIMIT
          return LOAD_LIMIT;
        case 11: // SVCTIMEOUT
          return SVCTIMEOUT;
        case 12: // SVCBLKTIME
          return SVCBLKTIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SGID_ISSET_ID = 0;
  private static final int __GRPID_ISSET_ID = 1;
  private static final int __SERVERID_ISSET_ID = 2;
  private static final int __PRIORITY_ISSET_ID = 3;
  private static final int __SVC_INDEX_ISSET_ID = 4;
  private static final int __SVC_LOAD_ISSET_ID = 5;
  private static final int __LOAD_LIMIT_ISSET_ID = 6;
  private static final int __SVCTIMEOUT_ISSET_ID = 7;
  private static final int __SVCBLKTIME_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SGID, new org.apache.thrift.meta_data.FieldMetaData("sgid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GRPID, new org.apache.thrift.meta_data.FieldMetaData("grpid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SVC_NAME, new org.apache.thrift.meta_data.FieldMetaData("svc_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SVC_CNAME, new org.apache.thrift.meta_data.FieldMetaData("svc_cname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SVC_INDEX, new org.apache.thrift.meta_data.FieldMetaData("svc_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SVC_LOAD, new org.apache.thrift.meta_data.FieldMetaData("svc_load", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAD_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("load_limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SVCTIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("svctimeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SVCBLKTIME, new org.apache.thrift.meta_data.FieldMetaData("svcblktime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceInfo.class, metaDataMap);
  }

  public ServiceInfo() {
  }

  public ServiceInfo(
    long sgid,
    int grpid,
    int serverid,
    int priority,
    String svc_name,
    String svc_cname,
    int svc_index,
    int svc_load,
    int load_limit,
    long svctimeout,
    long svcblktime)
  {
    this();
    this.sgid = sgid;
    setSgidIsSet(true);
    this.grpid = grpid;
    setGrpidIsSet(true);
    this.serverid = serverid;
    setServeridIsSet(true);
    this.priority = priority;
    setPriorityIsSet(true);
    this.svc_name = svc_name;
    this.svc_cname = svc_cname;
    this.svc_index = svc_index;
    setSvc_indexIsSet(true);
    this.svc_load = svc_load;
    setSvc_loadIsSet(true);
    this.load_limit = load_limit;
    setLoad_limitIsSet(true);
    this.svctimeout = svctimeout;
    setSvctimeoutIsSet(true);
    this.svcblktime = svcblktime;
    setSvcblktimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceInfo(ServiceInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sgid = other.sgid;
    this.grpid = other.grpid;
    this.serverid = other.serverid;
    this.priority = other.priority;
    if (other.isSetSvc_name()) {
      this.svc_name = other.svc_name;
    }
    if (other.isSetSvc_cname()) {
      this.svc_cname = other.svc_cname;
    }
    this.svc_index = other.svc_index;
    this.svc_load = other.svc_load;
    this.load_limit = other.load_limit;
    this.svctimeout = other.svctimeout;
    this.svcblktime = other.svcblktime;
  }

  public ServiceInfo deepCopy() {
    return new ServiceInfo(this);
  }

  @Override
  public void clear() {
    setSgidIsSet(false);
    this.sgid = 0;
    setGrpidIsSet(false);
    this.grpid = 0;
    setServeridIsSet(false);
    this.serverid = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    this.svc_name = null;
    this.svc_cname = null;
    setSvc_indexIsSet(false);
    this.svc_index = 0;
    setSvc_loadIsSet(false);
    this.svc_load = 0;
    setLoad_limitIsSet(false);
    this.load_limit = 0;
    setSvctimeoutIsSet(false);
    this.svctimeout = 0;
    setSvcblktimeIsSet(false);
    this.svcblktime = 0;
  }

  public long getSgid() {
    return this.sgid;
  }

  public ServiceInfo setSgid(long sgid) {
    this.sgid = sgid;
    setSgidIsSet(true);
    return this;
  }

  public void unsetSgid() {
    __isset_bit_vector.clear(__SGID_ISSET_ID);
  }

  /** Returns true if field sgid is set (has been assigned a value) and false otherwise */
  public boolean isSetSgid() {
    return __isset_bit_vector.get(__SGID_ISSET_ID);
  }

  public void setSgidIsSet(boolean value) {
    __isset_bit_vector.set(__SGID_ISSET_ID, value);
  }

  public int getGrpid() {
    return this.grpid;
  }

  public ServiceInfo setGrpid(int grpid) {
    this.grpid = grpid;
    setGrpidIsSet(true);
    return this;
  }

  public void unsetGrpid() {
    __isset_bit_vector.clear(__GRPID_ISSET_ID);
  }

  /** Returns true if field grpid is set (has been assigned a value) and false otherwise */
  public boolean isSetGrpid() {
    return __isset_bit_vector.get(__GRPID_ISSET_ID);
  }

  public void setGrpidIsSet(boolean value) {
    __isset_bit_vector.set(__GRPID_ISSET_ID, value);
  }

  public int getServerid() {
    return this.serverid;
  }

  public ServiceInfo setServerid(int serverid) {
    this.serverid = serverid;
    setServeridIsSet(true);
    return this;
  }

  public void unsetServerid() {
    __isset_bit_vector.clear(__SERVERID_ISSET_ID);
  }

  /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
  public boolean isSetServerid() {
    return __isset_bit_vector.get(__SERVERID_ISSET_ID);
  }

  public void setServeridIsSet(boolean value) {
    __isset_bit_vector.set(__SERVERID_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public ServiceInfo setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bit_vector.clear(__PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return __isset_bit_vector.get(__PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bit_vector.set(__PRIORITY_ISSET_ID, value);
  }

  public String getSvc_name() {
    return this.svc_name;
  }

  public ServiceInfo setSvc_name(String svc_name) {
    this.svc_name = svc_name;
    return this;
  }

  public void unsetSvc_name() {
    this.svc_name = null;
  }

  /** Returns true if field svc_name is set (has been assigned a value) and false otherwise */
  public boolean isSetSvc_name() {
    return this.svc_name != null;
  }

  public void setSvc_nameIsSet(boolean value) {
    if (!value) {
      this.svc_name = null;
    }
  }

  public String getSvc_cname() {
    return this.svc_cname;
  }

  public ServiceInfo setSvc_cname(String svc_cname) {
    this.svc_cname = svc_cname;
    return this;
  }

  public void unsetSvc_cname() {
    this.svc_cname = null;
  }

  /** Returns true if field svc_cname is set (has been assigned a value) and false otherwise */
  public boolean isSetSvc_cname() {
    return this.svc_cname != null;
  }

  public void setSvc_cnameIsSet(boolean value) {
    if (!value) {
      this.svc_cname = null;
    }
  }

  public int getSvc_index() {
    return this.svc_index;
  }

  public ServiceInfo setSvc_index(int svc_index) {
    this.svc_index = svc_index;
    setSvc_indexIsSet(true);
    return this;
  }

  public void unsetSvc_index() {
    __isset_bit_vector.clear(__SVC_INDEX_ISSET_ID);
  }

  /** Returns true if field svc_index is set (has been assigned a value) and false otherwise */
  public boolean isSetSvc_index() {
    return __isset_bit_vector.get(__SVC_INDEX_ISSET_ID);
  }

  public void setSvc_indexIsSet(boolean value) {
    __isset_bit_vector.set(__SVC_INDEX_ISSET_ID, value);
  }

  public int getSvc_load() {
    return this.svc_load;
  }

  public ServiceInfo setSvc_load(int svc_load) {
    this.svc_load = svc_load;
    setSvc_loadIsSet(true);
    return this;
  }

  public void unsetSvc_load() {
    __isset_bit_vector.clear(__SVC_LOAD_ISSET_ID);
  }

  /** Returns true if field svc_load is set (has been assigned a value) and false otherwise */
  public boolean isSetSvc_load() {
    return __isset_bit_vector.get(__SVC_LOAD_ISSET_ID);
  }

  public void setSvc_loadIsSet(boolean value) {
    __isset_bit_vector.set(__SVC_LOAD_ISSET_ID, value);
  }

  public int getLoad_limit() {
    return this.load_limit;
  }

  public ServiceInfo setLoad_limit(int load_limit) {
    this.load_limit = load_limit;
    setLoad_limitIsSet(true);
    return this;
  }

  public void unsetLoad_limit() {
    __isset_bit_vector.clear(__LOAD_LIMIT_ISSET_ID);
  }

  /** Returns true if field load_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_limit() {
    return __isset_bit_vector.get(__LOAD_LIMIT_ISSET_ID);
  }

  public void setLoad_limitIsSet(boolean value) {
    __isset_bit_vector.set(__LOAD_LIMIT_ISSET_ID, value);
  }

  public long getSvctimeout() {
    return this.svctimeout;
  }

  public ServiceInfo setSvctimeout(long svctimeout) {
    this.svctimeout = svctimeout;
    setSvctimeoutIsSet(true);
    return this;
  }

  public void unsetSvctimeout() {
    __isset_bit_vector.clear(__SVCTIMEOUT_ISSET_ID);
  }

  /** Returns true if field svctimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetSvctimeout() {
    return __isset_bit_vector.get(__SVCTIMEOUT_ISSET_ID);
  }

  public void setSvctimeoutIsSet(boolean value) {
    __isset_bit_vector.set(__SVCTIMEOUT_ISSET_ID, value);
  }

  public long getSvcblktime() {
    return this.svcblktime;
  }

  public ServiceInfo setSvcblktime(long svcblktime) {
    this.svcblktime = svcblktime;
    setSvcblktimeIsSet(true);
    return this;
  }

  public void unsetSvcblktime() {
    __isset_bit_vector.clear(__SVCBLKTIME_ISSET_ID);
  }

  /** Returns true if field svcblktime is set (has been assigned a value) and false otherwise */
  public boolean isSetSvcblktime() {
    return __isset_bit_vector.get(__SVCBLKTIME_ISSET_ID);
  }

  public void setSvcblktimeIsSet(boolean value) {
    __isset_bit_vector.set(__SVCBLKTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SGID:
      if (value == null) {
        unsetSgid();
      } else {
        setSgid((Long)value);
      }
      break;

    case GRPID:
      if (value == null) {
        unsetGrpid();
      } else {
        setGrpid((Integer)value);
      }
      break;

    case SERVERID:
      if (value == null) {
        unsetServerid();
      } else {
        setServerid((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case SVC_NAME:
      if (value == null) {
        unsetSvc_name();
      } else {
        setSvc_name((String)value);
      }
      break;

    case SVC_CNAME:
      if (value == null) {
        unsetSvc_cname();
      } else {
        setSvc_cname((String)value);
      }
      break;

    case SVC_INDEX:
      if (value == null) {
        unsetSvc_index();
      } else {
        setSvc_index((Integer)value);
      }
      break;

    case SVC_LOAD:
      if (value == null) {
        unsetSvc_load();
      } else {
        setSvc_load((Integer)value);
      }
      break;

    case LOAD_LIMIT:
      if (value == null) {
        unsetLoad_limit();
      } else {
        setLoad_limit((Integer)value);
      }
      break;

    case SVCTIMEOUT:
      if (value == null) {
        unsetSvctimeout();
      } else {
        setSvctimeout((Long)value);
      }
      break;

    case SVCBLKTIME:
      if (value == null) {
        unsetSvcblktime();
      } else {
        setSvcblktime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SGID:
      return Long.valueOf(getSgid());

    case GRPID:
      return Integer.valueOf(getGrpid());

    case SERVERID:
      return Integer.valueOf(getServerid());

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case SVC_NAME:
      return getSvc_name();

    case SVC_CNAME:
      return getSvc_cname();

    case SVC_INDEX:
      return Integer.valueOf(getSvc_index());

    case SVC_LOAD:
      return Integer.valueOf(getSvc_load());

    case LOAD_LIMIT:
      return Integer.valueOf(getLoad_limit());

    case SVCTIMEOUT:
      return Long.valueOf(getSvctimeout());

    case SVCBLKTIME:
      return Long.valueOf(getSvcblktime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SGID:
      return isSetSgid();
    case GRPID:
      return isSetGrpid();
    case SERVERID:
      return isSetServerid();
    case PRIORITY:
      return isSetPriority();
    case SVC_NAME:
      return isSetSvc_name();
    case SVC_CNAME:
      return isSetSvc_cname();
    case SVC_INDEX:
      return isSetSvc_index();
    case SVC_LOAD:
      return isSetSvc_load();
    case LOAD_LIMIT:
      return isSetLoad_limit();
    case SVCTIMEOUT:
      return isSetSvctimeout();
    case SVCBLKTIME:
      return isSetSvcblktime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceInfo)
      return this.equals((ServiceInfo)that);
    return false;
  }

  public boolean equals(ServiceInfo that) {
    if (that == null)
      return false;

    boolean this_present_sgid = true;
    boolean that_present_sgid = true;
    if (this_present_sgid || that_present_sgid) {
      if (!(this_present_sgid && that_present_sgid))
        return false;
      if (this.sgid != that.sgid)
        return false;
    }

    boolean this_present_grpid = true;
    boolean that_present_grpid = true;
    if (this_present_grpid || that_present_grpid) {
      if (!(this_present_grpid && that_present_grpid))
        return false;
      if (this.grpid != that.grpid)
        return false;
    }

    boolean this_present_serverid = true;
    boolean that_present_serverid = true;
    if (this_present_serverid || that_present_serverid) {
      if (!(this_present_serverid && that_present_serverid))
        return false;
      if (this.serverid != that.serverid)
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_svc_name = true && this.isSetSvc_name();
    boolean that_present_svc_name = true && that.isSetSvc_name();
    if (this_present_svc_name || that_present_svc_name) {
      if (!(this_present_svc_name && that_present_svc_name))
        return false;
      if (!this.svc_name.equals(that.svc_name))
        return false;
    }

    boolean this_present_svc_cname = true && this.isSetSvc_cname();
    boolean that_present_svc_cname = true && that.isSetSvc_cname();
    if (this_present_svc_cname || that_present_svc_cname) {
      if (!(this_present_svc_cname && that_present_svc_cname))
        return false;
      if (!this.svc_cname.equals(that.svc_cname))
        return false;
    }

    boolean this_present_svc_index = true;
    boolean that_present_svc_index = true;
    if (this_present_svc_index || that_present_svc_index) {
      if (!(this_present_svc_index && that_present_svc_index))
        return false;
      if (this.svc_index != that.svc_index)
        return false;
    }

    boolean this_present_svc_load = true;
    boolean that_present_svc_load = true;
    if (this_present_svc_load || that_present_svc_load) {
      if (!(this_present_svc_load && that_present_svc_load))
        return false;
      if (this.svc_load != that.svc_load)
        return false;
    }

    boolean this_present_load_limit = true;
    boolean that_present_load_limit = true;
    if (this_present_load_limit || that_present_load_limit) {
      if (!(this_present_load_limit && that_present_load_limit))
        return false;
      if (this.load_limit != that.load_limit)
        return false;
    }

    boolean this_present_svctimeout = true;
    boolean that_present_svctimeout = true;
    if (this_present_svctimeout || that_present_svctimeout) {
      if (!(this_present_svctimeout && that_present_svctimeout))
        return false;
      if (this.svctimeout != that.svctimeout)
        return false;
    }

    boolean this_present_svcblktime = true;
    boolean that_present_svcblktime = true;
    if (this_present_svcblktime || that_present_svcblktime) {
      if (!(this_present_svcblktime && that_present_svcblktime))
        return false;
      if (this.svcblktime != that.svcblktime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServiceInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServiceInfo typedOther = (ServiceInfo)other;

    lastComparison = Boolean.valueOf(isSetSgid()).compareTo(typedOther.isSetSgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgid, typedOther.sgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrpid()).compareTo(typedOther.isSetGrpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grpid, typedOther.grpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerid()).compareTo(typedOther.isSetServerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, typedOther.serverid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvc_name()).compareTo(typedOther.isSetSvc_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvc_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svc_name, typedOther.svc_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvc_cname()).compareTo(typedOther.isSetSvc_cname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvc_cname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svc_cname, typedOther.svc_cname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvc_index()).compareTo(typedOther.isSetSvc_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvc_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svc_index, typedOther.svc_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvc_load()).compareTo(typedOther.isSetSvc_load());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvc_load()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svc_load, typedOther.svc_load);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_limit()).compareTo(typedOther.isSetLoad_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_limit, typedOther.load_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvctimeout()).compareTo(typedOther.isSetSvctimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvctimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svctimeout, typedOther.svctimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvcblktime()).compareTo(typedOther.isSetSvcblktime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvcblktime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svcblktime, typedOther.svcblktime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceInfo(");
    boolean first = true;

    sb.append("sgid:");
    sb.append(this.sgid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("grpid:");
    sb.append(this.grpid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverid:");
    sb.append(this.serverid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("svc_name:");
    if (this.svc_name == null) {
      sb.append("null");
    } else {
      sb.append(this.svc_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("svc_cname:");
    if (this.svc_cname == null) {
      sb.append("null");
    } else {
      sb.append(this.svc_cname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("svc_index:");
    sb.append(this.svc_index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("svc_load:");
    sb.append(this.svc_load);
    first = false;
    if (!first) sb.append(", ");
    sb.append("load_limit:");
    sb.append(this.load_limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("svctimeout:");
    sb.append(this.svctimeout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("svcblktime:");
    sb.append(this.svcblktime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceInfoStandardSchemeFactory implements SchemeFactory {
    public ServiceInfoStandardScheme getScheme() {
      return new ServiceInfoStandardScheme();
    }
  }

  private static class ServiceInfoStandardScheme extends StandardScheme<ServiceInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sgid = iprot.readI64();
              struct.setSgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grpid = iprot.readI32();
              struct.setGrpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serverid = iprot.readI32();
              struct.setServeridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SVC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.svc_name = iprot.readString();
              struct.setSvc_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SVC_CNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.svc_cname = iprot.readString();
              struct.setSvc_cnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SVC_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.svc_index = iprot.readI32();
              struct.setSvc_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SVC_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.svc_load = iprot.readI32();
              struct.setSvc_loadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOAD_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.load_limit = iprot.readI32();
              struct.setLoad_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SVCTIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.svctimeout = iprot.readI64();
              struct.setSvctimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SVCBLKTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.svcblktime = iprot.readI64();
              struct.setSvcblktimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SGID_FIELD_DESC);
      oprot.writeI64(struct.sgid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GRPID_FIELD_DESC);
      oprot.writeI32(struct.grpid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVERID_FIELD_DESC);
      oprot.writeI32(struct.serverid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      if (struct.svc_name != null) {
        oprot.writeFieldBegin(SVC_NAME_FIELD_DESC);
        oprot.writeString(struct.svc_name);
        oprot.writeFieldEnd();
      }
      if (struct.svc_cname != null) {
        oprot.writeFieldBegin(SVC_CNAME_FIELD_DESC);
        oprot.writeString(struct.svc_cname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SVC_INDEX_FIELD_DESC);
      oprot.writeI32(struct.svc_index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SVC_LOAD_FIELD_DESC);
      oprot.writeI32(struct.svc_load);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.load_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SVCTIMEOUT_FIELD_DESC);
      oprot.writeI64(struct.svctimeout);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SVCBLKTIME_FIELD_DESC);
      oprot.writeI64(struct.svcblktime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceInfoTupleSchemeFactory implements SchemeFactory {
    public ServiceInfoTupleScheme getScheme() {
      return new ServiceInfoTupleScheme();
    }
  }

  private static class ServiceInfoTupleScheme extends TupleScheme<ServiceInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSgid()) {
        optionals.set(0);
      }
      if (struct.isSetGrpid()) {
        optionals.set(1);
      }
      if (struct.isSetServerid()) {
        optionals.set(2);
      }
      if (struct.isSetPriority()) {
        optionals.set(3);
      }
      if (struct.isSetSvc_name()) {
        optionals.set(4);
      }
      if (struct.isSetSvc_cname()) {
        optionals.set(5);
      }
      if (struct.isSetSvc_index()) {
        optionals.set(6);
      }
      if (struct.isSetSvc_load()) {
        optionals.set(7);
      }
      if (struct.isSetLoad_limit()) {
        optionals.set(8);
      }
      if (struct.isSetSvctimeout()) {
        optionals.set(9);
      }
      if (struct.isSetSvcblktime()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetSgid()) {
        oprot.writeI64(struct.sgid);
      }
      if (struct.isSetGrpid()) {
        oprot.writeI32(struct.grpid);
      }
      if (struct.isSetServerid()) {
        oprot.writeI32(struct.serverid);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetSvc_name()) {
        oprot.writeString(struct.svc_name);
      }
      if (struct.isSetSvc_cname()) {
        oprot.writeString(struct.svc_cname);
      }
      if (struct.isSetSvc_index()) {
        oprot.writeI32(struct.svc_index);
      }
      if (struct.isSetSvc_load()) {
        oprot.writeI32(struct.svc_load);
      }
      if (struct.isSetLoad_limit()) {
        oprot.writeI32(struct.load_limit);
      }
      if (struct.isSetSvctimeout()) {
        oprot.writeI64(struct.svctimeout);
      }
      if (struct.isSetSvcblktime()) {
        oprot.writeI64(struct.svcblktime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.sgid = iprot.readI64();
        struct.setSgidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.grpid = iprot.readI32();
        struct.setGrpidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serverid = iprot.readI32();
        struct.setServeridIsSet(true);
      }
      if (incoming.get(3)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.svc_name = iprot.readString();
        struct.setSvc_nameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.svc_cname = iprot.readString();
        struct.setSvc_cnameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.svc_index = iprot.readI32();
        struct.setSvc_indexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.svc_load = iprot.readI32();
        struct.setSvc_loadIsSet(true);
      }
      if (incoming.get(8)) {
        struct.load_limit = iprot.readI32();
        struct.setLoad_limitIsSet(true);
      }
      if (incoming.get(9)) {
        struct.svctimeout = iprot.readI64();
        struct.setSvctimeoutIsSet(true);
      }
      if (incoming.get(10)) {
        struct.svcblktime = iprot.readI64();
        struct.setSvcblktimeIsSet(true);
      }
    }
  }

}

