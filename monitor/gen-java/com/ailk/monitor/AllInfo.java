/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AllInfo implements org.apache.thrift.TBase<AllInfo, AllInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AllInfo");

  private static final org.apache.thrift.protocol.TField CLUSTER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CLUSTER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterState", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MACHINE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("machineInfos", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BBVERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("bbversion", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SERVER_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverGroups", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SERVER_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverInfos", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SERVER_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("serverStates", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SERVICE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceInfos", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SERVICE_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceStates", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField QUEUE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("queueInfos", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField QUEUE_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("queueStates", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AllInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AllInfoTupleSchemeFactory());
  }

  public ClusterInfo clusterInfo; // required
  public ClusterState clusterState; // required
  public List<MachineInfo> machineInfos; // required
  public int bbversion; // required
  public List<ServerGroup> serverGroups; // required
  public List<ServerInfo> serverInfos; // required
  public List<ServerState> serverStates; // required
  public List<ServiceInfo> serviceInfos; // required
  public List<ServiceState> serviceStates; // required
  public List<QueueInfo> queueInfos; // required
  public List<QueueState> queueStates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER_INFO((short)1, "clusterInfo"),
    CLUSTER_STATE((short)2, "clusterState"),
    MACHINE_INFOS((short)3, "machineInfos"),
    BBVERSION((short)4, "bbversion"),
    SERVER_GROUPS((short)5, "serverGroups"),
    SERVER_INFOS((short)6, "serverInfos"),
    SERVER_STATES((short)7, "serverStates"),
    SERVICE_INFOS((short)8, "serviceInfos"),
    SERVICE_STATES((short)9, "serviceStates"),
    QUEUE_INFOS((short)10, "queueInfos"),
    QUEUE_STATES((short)11, "queueStates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER_INFO
          return CLUSTER_INFO;
        case 2: // CLUSTER_STATE
          return CLUSTER_STATE;
        case 3: // MACHINE_INFOS
          return MACHINE_INFOS;
        case 4: // BBVERSION
          return BBVERSION;
        case 5: // SERVER_GROUPS
          return SERVER_GROUPS;
        case 6: // SERVER_INFOS
          return SERVER_INFOS;
        case 7: // SERVER_STATES
          return SERVER_STATES;
        case 8: // SERVICE_INFOS
          return SERVICE_INFOS;
        case 9: // SERVICE_STATES
          return SERVICE_STATES;
        case 10: // QUEUE_INFOS
          return QUEUE_INFOS;
        case 11: // QUEUE_STATES
          return QUEUE_STATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BBVERSION_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER_INFO, new org.apache.thrift.meta_data.FieldMetaData("clusterInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClusterInfo.class)));
    tmpMap.put(_Fields.CLUSTER_STATE, new org.apache.thrift.meta_data.FieldMetaData("clusterState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClusterState.class)));
    tmpMap.put(_Fields.MACHINE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("machineInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MachineInfo.class))));
    tmpMap.put(_Fields.BBVERSION, new org.apache.thrift.meta_data.FieldMetaData("bbversion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "BBVERSION")));
    tmpMap.put(_Fields.SERVER_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("serverGroups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerGroup.class))));
    tmpMap.put(_Fields.SERVER_INFOS, new org.apache.thrift.meta_data.FieldMetaData("serverInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerInfo.class))));
    tmpMap.put(_Fields.SERVER_STATES, new org.apache.thrift.meta_data.FieldMetaData("serverStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerState.class))));
    tmpMap.put(_Fields.SERVICE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("serviceInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceInfo.class))));
    tmpMap.put(_Fields.SERVICE_STATES, new org.apache.thrift.meta_data.FieldMetaData("serviceStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceState.class))));
    tmpMap.put(_Fields.QUEUE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("queueInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueueInfo.class))));
    tmpMap.put(_Fields.QUEUE_STATES, new org.apache.thrift.meta_data.FieldMetaData("queueStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueueState.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AllInfo.class, metaDataMap);
  }

  public AllInfo() {
  }

  public AllInfo(
    ClusterInfo clusterInfo,
    ClusterState clusterState,
    List<MachineInfo> machineInfos,
    int bbversion,
    List<ServerGroup> serverGroups,
    List<ServerInfo> serverInfos,
    List<ServerState> serverStates,
    List<ServiceInfo> serviceInfos,
    List<ServiceState> serviceStates,
    List<QueueInfo> queueInfos,
    List<QueueState> queueStates)
  {
    this();
    this.clusterInfo = clusterInfo;
    this.clusterState = clusterState;
    this.machineInfos = machineInfos;
    this.bbversion = bbversion;
    setBbversionIsSet(true);
    this.serverGroups = serverGroups;
    this.serverInfos = serverInfos;
    this.serverStates = serverStates;
    this.serviceInfos = serviceInfos;
    this.serviceStates = serviceStates;
    this.queueInfos = queueInfos;
    this.queueStates = queueStates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AllInfo(AllInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetClusterInfo()) {
      this.clusterInfo = new ClusterInfo(other.clusterInfo);
    }
    if (other.isSetClusterState()) {
      this.clusterState = new ClusterState(other.clusterState);
    }
    if (other.isSetMachineInfos()) {
      List<MachineInfo> __this__machineInfos = new ArrayList<MachineInfo>();
      for (MachineInfo other_element : other.machineInfos) {
        __this__machineInfos.add(new MachineInfo(other_element));
      }
      this.machineInfos = __this__machineInfos;
    }
    this.bbversion = other.bbversion;
    if (other.isSetServerGroups()) {
      List<ServerGroup> __this__serverGroups = new ArrayList<ServerGroup>();
      for (ServerGroup other_element : other.serverGroups) {
        __this__serverGroups.add(new ServerGroup(other_element));
      }
      this.serverGroups = __this__serverGroups;
    }
    if (other.isSetServerInfos()) {
      List<ServerInfo> __this__serverInfos = new ArrayList<ServerInfo>();
      for (ServerInfo other_element : other.serverInfos) {
        __this__serverInfos.add(new ServerInfo(other_element));
      }
      this.serverInfos = __this__serverInfos;
    }
    if (other.isSetServerStates()) {
      List<ServerState> __this__serverStates = new ArrayList<ServerState>();
      for (ServerState other_element : other.serverStates) {
        __this__serverStates.add(new ServerState(other_element));
      }
      this.serverStates = __this__serverStates;
    }
    if (other.isSetServiceInfos()) {
      List<ServiceInfo> __this__serviceInfos = new ArrayList<ServiceInfo>();
      for (ServiceInfo other_element : other.serviceInfos) {
        __this__serviceInfos.add(new ServiceInfo(other_element));
      }
      this.serviceInfos = __this__serviceInfos;
    }
    if (other.isSetServiceStates()) {
      List<ServiceState> __this__serviceStates = new ArrayList<ServiceState>();
      for (ServiceState other_element : other.serviceStates) {
        __this__serviceStates.add(new ServiceState(other_element));
      }
      this.serviceStates = __this__serviceStates;
    }
    if (other.isSetQueueInfos()) {
      List<QueueInfo> __this__queueInfos = new ArrayList<QueueInfo>();
      for (QueueInfo other_element : other.queueInfos) {
        __this__queueInfos.add(new QueueInfo(other_element));
      }
      this.queueInfos = __this__queueInfos;
    }
    if (other.isSetQueueStates()) {
      List<QueueState> __this__queueStates = new ArrayList<QueueState>();
      for (QueueState other_element : other.queueStates) {
        __this__queueStates.add(new QueueState(other_element));
      }
      this.queueStates = __this__queueStates;
    }
  }

  public AllInfo deepCopy() {
    return new AllInfo(this);
  }

  @Override
  public void clear() {
    this.clusterInfo = null;
    this.clusterState = null;
    this.machineInfos = null;
    setBbversionIsSet(false);
    this.bbversion = 0;
    this.serverGroups = null;
    this.serverInfos = null;
    this.serverStates = null;
    this.serviceInfos = null;
    this.serviceStates = null;
    this.queueInfos = null;
    this.queueStates = null;
  }

  public ClusterInfo getClusterInfo() {
    return this.clusterInfo;
  }

  public AllInfo setClusterInfo(ClusterInfo clusterInfo) {
    this.clusterInfo = clusterInfo;
    return this;
  }

  public void unsetClusterInfo() {
    this.clusterInfo = null;
  }

  /** Returns true if field clusterInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterInfo() {
    return this.clusterInfo != null;
  }

  public void setClusterInfoIsSet(boolean value) {
    if (!value) {
      this.clusterInfo = null;
    }
  }

  public ClusterState getClusterState() {
    return this.clusterState;
  }

  public AllInfo setClusterState(ClusterState clusterState) {
    this.clusterState = clusterState;
    return this;
  }

  public void unsetClusterState() {
    this.clusterState = null;
  }

  /** Returns true if field clusterState is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterState() {
    return this.clusterState != null;
  }

  public void setClusterStateIsSet(boolean value) {
    if (!value) {
      this.clusterState = null;
    }
  }

  public int getMachineInfosSize() {
    return (this.machineInfos == null) ? 0 : this.machineInfos.size();
  }

  public java.util.Iterator<MachineInfo> getMachineInfosIterator() {
    return (this.machineInfos == null) ? null : this.machineInfos.iterator();
  }

  public void addToMachineInfos(MachineInfo elem) {
    if (this.machineInfos == null) {
      this.machineInfos = new ArrayList<MachineInfo>();
    }
    this.machineInfos.add(elem);
  }

  public List<MachineInfo> getMachineInfos() {
    return this.machineInfos;
  }

  public AllInfo setMachineInfos(List<MachineInfo> machineInfos) {
    this.machineInfos = machineInfos;
    return this;
  }

  public void unsetMachineInfos() {
    this.machineInfos = null;
  }

  /** Returns true if field machineInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineInfos() {
    return this.machineInfos != null;
  }

  public void setMachineInfosIsSet(boolean value) {
    if (!value) {
      this.machineInfos = null;
    }
  }

  public int getBbversion() {
    return this.bbversion;
  }

  public AllInfo setBbversion(int bbversion) {
    this.bbversion = bbversion;
    setBbversionIsSet(true);
    return this;
  }

  public void unsetBbversion() {
    __isset_bit_vector.clear(__BBVERSION_ISSET_ID);
  }

  /** Returns true if field bbversion is set (has been assigned a value) and false otherwise */
  public boolean isSetBbversion() {
    return __isset_bit_vector.get(__BBVERSION_ISSET_ID);
  }

  public void setBbversionIsSet(boolean value) {
    __isset_bit_vector.set(__BBVERSION_ISSET_ID, value);
  }

  public int getServerGroupsSize() {
    return (this.serverGroups == null) ? 0 : this.serverGroups.size();
  }

  public java.util.Iterator<ServerGroup> getServerGroupsIterator() {
    return (this.serverGroups == null) ? null : this.serverGroups.iterator();
  }

  public void addToServerGroups(ServerGroup elem) {
    if (this.serverGroups == null) {
      this.serverGroups = new ArrayList<ServerGroup>();
    }
    this.serverGroups.add(elem);
  }

  public List<ServerGroup> getServerGroups() {
    return this.serverGroups;
  }

  public AllInfo setServerGroups(List<ServerGroup> serverGroups) {
    this.serverGroups = serverGroups;
    return this;
  }

  public void unsetServerGroups() {
    this.serverGroups = null;
  }

  /** Returns true if field serverGroups is set (has been assigned a value) and false otherwise */
  public boolean isSetServerGroups() {
    return this.serverGroups != null;
  }

  public void setServerGroupsIsSet(boolean value) {
    if (!value) {
      this.serverGroups = null;
    }
  }

  public int getServerInfosSize() {
    return (this.serverInfos == null) ? 0 : this.serverInfos.size();
  }

  public java.util.Iterator<ServerInfo> getServerInfosIterator() {
    return (this.serverInfos == null) ? null : this.serverInfos.iterator();
  }

  public void addToServerInfos(ServerInfo elem) {
    if (this.serverInfos == null) {
      this.serverInfos = new ArrayList<ServerInfo>();
    }
    this.serverInfos.add(elem);
  }

  public List<ServerInfo> getServerInfos() {
    return this.serverInfos;
  }

  public AllInfo setServerInfos(List<ServerInfo> serverInfos) {
    this.serverInfos = serverInfos;
    return this;
  }

  public void unsetServerInfos() {
    this.serverInfos = null;
  }

  /** Returns true if field serverInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetServerInfos() {
    return this.serverInfos != null;
  }

  public void setServerInfosIsSet(boolean value) {
    if (!value) {
      this.serverInfos = null;
    }
  }

  public int getServerStatesSize() {
    return (this.serverStates == null) ? 0 : this.serverStates.size();
  }

  public java.util.Iterator<ServerState> getServerStatesIterator() {
    return (this.serverStates == null) ? null : this.serverStates.iterator();
  }

  public void addToServerStates(ServerState elem) {
    if (this.serverStates == null) {
      this.serverStates = new ArrayList<ServerState>();
    }
    this.serverStates.add(elem);
  }

  public List<ServerState> getServerStates() {
    return this.serverStates;
  }

  public AllInfo setServerStates(List<ServerState> serverStates) {
    this.serverStates = serverStates;
    return this;
  }

  public void unsetServerStates() {
    this.serverStates = null;
  }

  /** Returns true if field serverStates is set (has been assigned a value) and false otherwise */
  public boolean isSetServerStates() {
    return this.serverStates != null;
  }

  public void setServerStatesIsSet(boolean value) {
    if (!value) {
      this.serverStates = null;
    }
  }

  public int getServiceInfosSize() {
    return (this.serviceInfos == null) ? 0 : this.serviceInfos.size();
  }

  public java.util.Iterator<ServiceInfo> getServiceInfosIterator() {
    return (this.serviceInfos == null) ? null : this.serviceInfos.iterator();
  }

  public void addToServiceInfos(ServiceInfo elem) {
    if (this.serviceInfos == null) {
      this.serviceInfos = new ArrayList<ServiceInfo>();
    }
    this.serviceInfos.add(elem);
  }

  public List<ServiceInfo> getServiceInfos() {
    return this.serviceInfos;
  }

  public AllInfo setServiceInfos(List<ServiceInfo> serviceInfos) {
    this.serviceInfos = serviceInfos;
    return this;
  }

  public void unsetServiceInfos() {
    this.serviceInfos = null;
  }

  /** Returns true if field serviceInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceInfos() {
    return this.serviceInfos != null;
  }

  public void setServiceInfosIsSet(boolean value) {
    if (!value) {
      this.serviceInfos = null;
    }
  }

  public int getServiceStatesSize() {
    return (this.serviceStates == null) ? 0 : this.serviceStates.size();
  }

  public java.util.Iterator<ServiceState> getServiceStatesIterator() {
    return (this.serviceStates == null) ? null : this.serviceStates.iterator();
  }

  public void addToServiceStates(ServiceState elem) {
    if (this.serviceStates == null) {
      this.serviceStates = new ArrayList<ServiceState>();
    }
    this.serviceStates.add(elem);
  }

  public List<ServiceState> getServiceStates() {
    return this.serviceStates;
  }

  public AllInfo setServiceStates(List<ServiceState> serviceStates) {
    this.serviceStates = serviceStates;
    return this;
  }

  public void unsetServiceStates() {
    this.serviceStates = null;
  }

  /** Returns true if field serviceStates is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceStates() {
    return this.serviceStates != null;
  }

  public void setServiceStatesIsSet(boolean value) {
    if (!value) {
      this.serviceStates = null;
    }
  }

  public int getQueueInfosSize() {
    return (this.queueInfos == null) ? 0 : this.queueInfos.size();
  }

  public java.util.Iterator<QueueInfo> getQueueInfosIterator() {
    return (this.queueInfos == null) ? null : this.queueInfos.iterator();
  }

  public void addToQueueInfos(QueueInfo elem) {
    if (this.queueInfos == null) {
      this.queueInfos = new ArrayList<QueueInfo>();
    }
    this.queueInfos.add(elem);
  }

  public List<QueueInfo> getQueueInfos() {
    return this.queueInfos;
  }

  public AllInfo setQueueInfos(List<QueueInfo> queueInfos) {
    this.queueInfos = queueInfos;
    return this;
  }

  public void unsetQueueInfos() {
    this.queueInfos = null;
  }

  /** Returns true if field queueInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueInfos() {
    return this.queueInfos != null;
  }

  public void setQueueInfosIsSet(boolean value) {
    if (!value) {
      this.queueInfos = null;
    }
  }

  public int getQueueStatesSize() {
    return (this.queueStates == null) ? 0 : this.queueStates.size();
  }

  public java.util.Iterator<QueueState> getQueueStatesIterator() {
    return (this.queueStates == null) ? null : this.queueStates.iterator();
  }

  public void addToQueueStates(QueueState elem) {
    if (this.queueStates == null) {
      this.queueStates = new ArrayList<QueueState>();
    }
    this.queueStates.add(elem);
  }

  public List<QueueState> getQueueStates() {
    return this.queueStates;
  }

  public AllInfo setQueueStates(List<QueueState> queueStates) {
    this.queueStates = queueStates;
    return this;
  }

  public void unsetQueueStates() {
    this.queueStates = null;
  }

  /** Returns true if field queueStates is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueStates() {
    return this.queueStates != null;
  }

  public void setQueueStatesIsSet(boolean value) {
    if (!value) {
      this.queueStates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER_INFO:
      if (value == null) {
        unsetClusterInfo();
      } else {
        setClusterInfo((ClusterInfo)value);
      }
      break;

    case CLUSTER_STATE:
      if (value == null) {
        unsetClusterState();
      } else {
        setClusterState((ClusterState)value);
      }
      break;

    case MACHINE_INFOS:
      if (value == null) {
        unsetMachineInfos();
      } else {
        setMachineInfos((List<MachineInfo>)value);
      }
      break;

    case BBVERSION:
      if (value == null) {
        unsetBbversion();
      } else {
        setBbversion((Integer)value);
      }
      break;

    case SERVER_GROUPS:
      if (value == null) {
        unsetServerGroups();
      } else {
        setServerGroups((List<ServerGroup>)value);
      }
      break;

    case SERVER_INFOS:
      if (value == null) {
        unsetServerInfos();
      } else {
        setServerInfos((List<ServerInfo>)value);
      }
      break;

    case SERVER_STATES:
      if (value == null) {
        unsetServerStates();
      } else {
        setServerStates((List<ServerState>)value);
      }
      break;

    case SERVICE_INFOS:
      if (value == null) {
        unsetServiceInfos();
      } else {
        setServiceInfos((List<ServiceInfo>)value);
      }
      break;

    case SERVICE_STATES:
      if (value == null) {
        unsetServiceStates();
      } else {
        setServiceStates((List<ServiceState>)value);
      }
      break;

    case QUEUE_INFOS:
      if (value == null) {
        unsetQueueInfos();
      } else {
        setQueueInfos((List<QueueInfo>)value);
      }
      break;

    case QUEUE_STATES:
      if (value == null) {
        unsetQueueStates();
      } else {
        setQueueStates((List<QueueState>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER_INFO:
      return getClusterInfo();

    case CLUSTER_STATE:
      return getClusterState();

    case MACHINE_INFOS:
      return getMachineInfos();

    case BBVERSION:
      return Integer.valueOf(getBbversion());

    case SERVER_GROUPS:
      return getServerGroups();

    case SERVER_INFOS:
      return getServerInfos();

    case SERVER_STATES:
      return getServerStates();

    case SERVICE_INFOS:
      return getServiceInfos();

    case SERVICE_STATES:
      return getServiceStates();

    case QUEUE_INFOS:
      return getQueueInfos();

    case QUEUE_STATES:
      return getQueueStates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER_INFO:
      return isSetClusterInfo();
    case CLUSTER_STATE:
      return isSetClusterState();
    case MACHINE_INFOS:
      return isSetMachineInfos();
    case BBVERSION:
      return isSetBbversion();
    case SERVER_GROUPS:
      return isSetServerGroups();
    case SERVER_INFOS:
      return isSetServerInfos();
    case SERVER_STATES:
      return isSetServerStates();
    case SERVICE_INFOS:
      return isSetServiceInfos();
    case SERVICE_STATES:
      return isSetServiceStates();
    case QUEUE_INFOS:
      return isSetQueueInfos();
    case QUEUE_STATES:
      return isSetQueueStates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AllInfo)
      return this.equals((AllInfo)that);
    return false;
  }

  public boolean equals(AllInfo that) {
    if (that == null)
      return false;

    boolean this_present_clusterInfo = true && this.isSetClusterInfo();
    boolean that_present_clusterInfo = true && that.isSetClusterInfo();
    if (this_present_clusterInfo || that_present_clusterInfo) {
      if (!(this_present_clusterInfo && that_present_clusterInfo))
        return false;
      if (!this.clusterInfo.equals(that.clusterInfo))
        return false;
    }

    boolean this_present_clusterState = true && this.isSetClusterState();
    boolean that_present_clusterState = true && that.isSetClusterState();
    if (this_present_clusterState || that_present_clusterState) {
      if (!(this_present_clusterState && that_present_clusterState))
        return false;
      if (!this.clusterState.equals(that.clusterState))
        return false;
    }

    boolean this_present_machineInfos = true && this.isSetMachineInfos();
    boolean that_present_machineInfos = true && that.isSetMachineInfos();
    if (this_present_machineInfos || that_present_machineInfos) {
      if (!(this_present_machineInfos && that_present_machineInfos))
        return false;
      if (!this.machineInfos.equals(that.machineInfos))
        return false;
    }

    boolean this_present_bbversion = true;
    boolean that_present_bbversion = true;
    if (this_present_bbversion || that_present_bbversion) {
      if (!(this_present_bbversion && that_present_bbversion))
        return false;
      if (this.bbversion != that.bbversion)
        return false;
    }

    boolean this_present_serverGroups = true && this.isSetServerGroups();
    boolean that_present_serverGroups = true && that.isSetServerGroups();
    if (this_present_serverGroups || that_present_serverGroups) {
      if (!(this_present_serverGroups && that_present_serverGroups))
        return false;
      if (!this.serverGroups.equals(that.serverGroups))
        return false;
    }

    boolean this_present_serverInfos = true && this.isSetServerInfos();
    boolean that_present_serverInfos = true && that.isSetServerInfos();
    if (this_present_serverInfos || that_present_serverInfos) {
      if (!(this_present_serverInfos && that_present_serverInfos))
        return false;
      if (!this.serverInfos.equals(that.serverInfos))
        return false;
    }

    boolean this_present_serverStates = true && this.isSetServerStates();
    boolean that_present_serverStates = true && that.isSetServerStates();
    if (this_present_serverStates || that_present_serverStates) {
      if (!(this_present_serverStates && that_present_serverStates))
        return false;
      if (!this.serverStates.equals(that.serverStates))
        return false;
    }

    boolean this_present_serviceInfos = true && this.isSetServiceInfos();
    boolean that_present_serviceInfos = true && that.isSetServiceInfos();
    if (this_present_serviceInfos || that_present_serviceInfos) {
      if (!(this_present_serviceInfos && that_present_serviceInfos))
        return false;
      if (!this.serviceInfos.equals(that.serviceInfos))
        return false;
    }

    boolean this_present_serviceStates = true && this.isSetServiceStates();
    boolean that_present_serviceStates = true && that.isSetServiceStates();
    if (this_present_serviceStates || that_present_serviceStates) {
      if (!(this_present_serviceStates && that_present_serviceStates))
        return false;
      if (!this.serviceStates.equals(that.serviceStates))
        return false;
    }

    boolean this_present_queueInfos = true && this.isSetQueueInfos();
    boolean that_present_queueInfos = true && that.isSetQueueInfos();
    if (this_present_queueInfos || that_present_queueInfos) {
      if (!(this_present_queueInfos && that_present_queueInfos))
        return false;
      if (!this.queueInfos.equals(that.queueInfos))
        return false;
    }

    boolean this_present_queueStates = true && this.isSetQueueStates();
    boolean that_present_queueStates = true && that.isSetQueueStates();
    if (this_present_queueStates || that_present_queueStates) {
      if (!(this_present_queueStates && that_present_queueStates))
        return false;
      if (!this.queueStates.equals(that.queueStates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AllInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AllInfo typedOther = (AllInfo)other;

    lastComparison = Boolean.valueOf(isSetClusterInfo()).compareTo(typedOther.isSetClusterInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterInfo, typedOther.clusterInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterState()).compareTo(typedOther.isSetClusterState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterState, typedOther.clusterState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineInfos()).compareTo(typedOther.isSetMachineInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineInfos, typedOther.machineInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBbversion()).compareTo(typedOther.isSetBbversion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBbversion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bbversion, typedOther.bbversion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerGroups()).compareTo(typedOther.isSetServerGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverGroups, typedOther.serverGroups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerInfos()).compareTo(typedOther.isSetServerInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverInfos, typedOther.serverInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerStates()).compareTo(typedOther.isSetServerStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverStates, typedOther.serverStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceInfos()).compareTo(typedOther.isSetServiceInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceInfos, typedOther.serviceInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceStates()).compareTo(typedOther.isSetServiceStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceStates, typedOther.serviceStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueInfos()).compareTo(typedOther.isSetQueueInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueInfos, typedOther.queueInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueStates()).compareTo(typedOther.isSetQueueStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueStates, typedOther.queueStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AllInfo(");
    boolean first = true;

    sb.append("clusterInfo:");
    if (this.clusterInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clusterState:");
    if (this.clusterState == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("machineInfos:");
    if (this.machineInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.machineInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bbversion:");
    sb.append(this.bbversion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverGroups:");
    if (this.serverGroups == null) {
      sb.append("null");
    } else {
      sb.append(this.serverGroups);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverInfos:");
    if (this.serverInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.serverInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverStates:");
    if (this.serverStates == null) {
      sb.append("null");
    } else {
      sb.append(this.serverStates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceInfos:");
    if (this.serviceInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceStates:");
    if (this.serviceStates == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceStates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueInfos:");
    if (this.queueInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.queueInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueStates:");
    if (this.queueStates == null) {
      sb.append("null");
    } else {
      sb.append(this.queueStates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AllInfoStandardSchemeFactory implements SchemeFactory {
    public AllInfoStandardScheme getScheme() {
      return new AllInfoStandardScheme();
    }
  }

  private static class AllInfoStandardScheme extends StandardScheme<AllInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AllInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clusterInfo = new ClusterInfo();
              struct.clusterInfo.read(iprot);
              struct.setClusterInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLUSTER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clusterState = new ClusterState();
              struct.clusterState.read(iprot);
              struct.setClusterStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MACHINE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.machineInfos = new ArrayList<MachineInfo>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  MachineInfo _elem10; // required
                  _elem10 = new MachineInfo();
                  _elem10.read(iprot);
                  struct.machineInfos.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMachineInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BBVERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bbversion = iprot.readI32();
              struct.setBbversionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVER_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.serverGroups = new ArrayList<ServerGroup>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  ServerGroup _elem13; // required
                  _elem13 = new ServerGroup();
                  _elem13.read(iprot);
                  struct.serverGroups.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setServerGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVER_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.serverInfos = new ArrayList<ServerInfo>(_list14.size);
                for (int _i15 = 0; _i15 < _list14.size; ++_i15)
                {
                  ServerInfo _elem16; // required
                  _elem16 = new ServerInfo();
                  _elem16.read(iprot);
                  struct.serverInfos.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setServerInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SERVER_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.serverStates = new ArrayList<ServerState>(_list17.size);
                for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                {
                  ServerState _elem19; // required
                  _elem19 = new ServerState();
                  _elem19.read(iprot);
                  struct.serverStates.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setServerStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVICE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.serviceInfos = new ArrayList<ServiceInfo>(_list20.size);
                for (int _i21 = 0; _i21 < _list20.size; ++_i21)
                {
                  ServiceInfo _elem22; // required
                  _elem22 = new ServiceInfo();
                  _elem22.read(iprot);
                  struct.serviceInfos.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setServiceInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SERVICE_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.serviceStates = new ArrayList<ServiceState>(_list23.size);
                for (int _i24 = 0; _i24 < _list23.size; ++_i24)
                {
                  ServiceState _elem25; // required
                  _elem25 = new ServiceState();
                  _elem25.read(iprot);
                  struct.serviceStates.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setServiceStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QUEUE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.queueInfos = new ArrayList<QueueInfo>(_list26.size);
                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                {
                  QueueInfo _elem28; // required
                  _elem28 = new QueueInfo();
                  _elem28.read(iprot);
                  struct.queueInfos.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setQueueInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // QUEUE_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.queueStates = new ArrayList<QueueState>(_list29.size);
                for (int _i30 = 0; _i30 < _list29.size; ++_i30)
                {
                  QueueState _elem31; // required
                  _elem31 = new QueueState();
                  _elem31.read(iprot);
                  struct.queueStates.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setQueueStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AllInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clusterInfo != null) {
        oprot.writeFieldBegin(CLUSTER_INFO_FIELD_DESC);
        struct.clusterInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.clusterState != null) {
        oprot.writeFieldBegin(CLUSTER_STATE_FIELD_DESC);
        struct.clusterState.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.machineInfos != null) {
        oprot.writeFieldBegin(MACHINE_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.machineInfos.size()));
          for (MachineInfo _iter32 : struct.machineInfos)
          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BBVERSION_FIELD_DESC);
      oprot.writeI32(struct.bbversion);
      oprot.writeFieldEnd();
      if (struct.serverGroups != null) {
        oprot.writeFieldBegin(SERVER_GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serverGroups.size()));
          for (ServerGroup _iter33 : struct.serverGroups)
          {
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.serverInfos != null) {
        oprot.writeFieldBegin(SERVER_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serverInfos.size()));
          for (ServerInfo _iter34 : struct.serverInfos)
          {
            _iter34.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.serverStates != null) {
        oprot.writeFieldBegin(SERVER_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serverStates.size()));
          for (ServerState _iter35 : struct.serverStates)
          {
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.serviceInfos != null) {
        oprot.writeFieldBegin(SERVICE_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serviceInfos.size()));
          for (ServiceInfo _iter36 : struct.serviceInfos)
          {
            _iter36.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.serviceStates != null) {
        oprot.writeFieldBegin(SERVICE_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serviceStates.size()));
          for (ServiceState _iter37 : struct.serviceStates)
          {
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.queueInfos != null) {
        oprot.writeFieldBegin(QUEUE_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.queueInfos.size()));
          for (QueueInfo _iter38 : struct.queueInfos)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.queueStates != null) {
        oprot.writeFieldBegin(QUEUE_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.queueStates.size()));
          for (QueueState _iter39 : struct.queueStates)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AllInfoTupleSchemeFactory implements SchemeFactory {
    public AllInfoTupleScheme getScheme() {
      return new AllInfoTupleScheme();
    }
  }

  private static class AllInfoTupleScheme extends TupleScheme<AllInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AllInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClusterInfo()) {
        optionals.set(0);
      }
      if (struct.isSetClusterState()) {
        optionals.set(1);
      }
      if (struct.isSetMachineInfos()) {
        optionals.set(2);
      }
      if (struct.isSetBbversion()) {
        optionals.set(3);
      }
      if (struct.isSetServerGroups()) {
        optionals.set(4);
      }
      if (struct.isSetServerInfos()) {
        optionals.set(5);
      }
      if (struct.isSetServerStates()) {
        optionals.set(6);
      }
      if (struct.isSetServiceInfos()) {
        optionals.set(7);
      }
      if (struct.isSetServiceStates()) {
        optionals.set(8);
      }
      if (struct.isSetQueueInfos()) {
        optionals.set(9);
      }
      if (struct.isSetQueueStates()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetClusterInfo()) {
        struct.clusterInfo.write(oprot);
      }
      if (struct.isSetClusterState()) {
        struct.clusterState.write(oprot);
      }
      if (struct.isSetMachineInfos()) {
        {
          oprot.writeI32(struct.machineInfos.size());
          for (MachineInfo _iter40 : struct.machineInfos)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetBbversion()) {
        oprot.writeI32(struct.bbversion);
      }
      if (struct.isSetServerGroups()) {
        {
          oprot.writeI32(struct.serverGroups.size());
          for (ServerGroup _iter41 : struct.serverGroups)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetServerInfos()) {
        {
          oprot.writeI32(struct.serverInfos.size());
          for (ServerInfo _iter42 : struct.serverInfos)
          {
            _iter42.write(oprot);
          }
        }
      }
      if (struct.isSetServerStates()) {
        {
          oprot.writeI32(struct.serverStates.size());
          for (ServerState _iter43 : struct.serverStates)
          {
            _iter43.write(oprot);
          }
        }
      }
      if (struct.isSetServiceInfos()) {
        {
          oprot.writeI32(struct.serviceInfos.size());
          for (ServiceInfo _iter44 : struct.serviceInfos)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetServiceStates()) {
        {
          oprot.writeI32(struct.serviceStates.size());
          for (ServiceState _iter45 : struct.serviceStates)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetQueueInfos()) {
        {
          oprot.writeI32(struct.queueInfos.size());
          for (QueueInfo _iter46 : struct.queueInfos)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetQueueStates()) {
        {
          oprot.writeI32(struct.queueStates.size());
          for (QueueState _iter47 : struct.queueStates)
          {
            _iter47.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AllInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.clusterInfo = new ClusterInfo();
        struct.clusterInfo.read(iprot);
        struct.setClusterInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clusterState = new ClusterState();
        struct.clusterState.read(iprot);
        struct.setClusterStateIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.machineInfos = new ArrayList<MachineInfo>(_list48.size);
          for (int _i49 = 0; _i49 < _list48.size; ++_i49)
          {
            MachineInfo _elem50; // required
            _elem50 = new MachineInfo();
            _elem50.read(iprot);
            struct.machineInfos.add(_elem50);
          }
        }
        struct.setMachineInfosIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bbversion = iprot.readI32();
        struct.setBbversionIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serverGroups = new ArrayList<ServerGroup>(_list51.size);
          for (int _i52 = 0; _i52 < _list51.size; ++_i52)
          {
            ServerGroup _elem53; // required
            _elem53 = new ServerGroup();
            _elem53.read(iprot);
            struct.serverGroups.add(_elem53);
          }
        }
        struct.setServerGroupsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serverInfos = new ArrayList<ServerInfo>(_list54.size);
          for (int _i55 = 0; _i55 < _list54.size; ++_i55)
          {
            ServerInfo _elem56; // required
            _elem56 = new ServerInfo();
            _elem56.read(iprot);
            struct.serverInfos.add(_elem56);
          }
        }
        struct.setServerInfosIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serverStates = new ArrayList<ServerState>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            ServerState _elem59; // required
            _elem59 = new ServerState();
            _elem59.read(iprot);
            struct.serverStates.add(_elem59);
          }
        }
        struct.setServerStatesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serviceInfos = new ArrayList<ServiceInfo>(_list60.size);
          for (int _i61 = 0; _i61 < _list60.size; ++_i61)
          {
            ServiceInfo _elem62; // required
            _elem62 = new ServiceInfo();
            _elem62.read(iprot);
            struct.serviceInfos.add(_elem62);
          }
        }
        struct.setServiceInfosIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serviceStates = new ArrayList<ServiceState>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            ServiceState _elem65; // required
            _elem65 = new ServiceState();
            _elem65.read(iprot);
            struct.serviceStates.add(_elem65);
          }
        }
        struct.setServiceStatesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.queueInfos = new ArrayList<QueueInfo>(_list66.size);
          for (int _i67 = 0; _i67 < _list66.size; ++_i67)
          {
            QueueInfo _elem68; // required
            _elem68 = new QueueInfo();
            _elem68.read(iprot);
            struct.queueInfos.add(_elem68);
          }
        }
        struct.setQueueInfosIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.queueStates = new ArrayList<QueueState>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            QueueState _elem71; // required
            _elem71 = new QueueState();
            _elem71.read(iprot);
            struct.queueStates.add(_elem71);
          }
        }
        struct.setQueueStatesIsSet(true);
      }
    }
  }

}

