/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServerInfo implements org.apache.thrift.TBase<ServerInfo, ServerInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerInfo");

  private static final org.apache.thrift.protocol.TField SGID_FIELD_DESC = new org.apache.thrift.protocol.TField("sgid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField QUEUESGID_FIELD_DESC = new org.apache.thrift.protocol.TField("queuesgid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GRPID_FIELD_DESC = new org.apache.thrift.protocol.TField("grpid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SVRID_FIELD_DESC = new org.apache.thrift.protocol.TField("svrid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SERVNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("servname", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServerInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServerInfoTupleSchemeFactory());
  }

  public long sgid; // required
  public long queuesgid; // required
  public int grpid; // required
  public int svrid; // required
  public String servname; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SGID((short)1, "sgid"),
    QUEUESGID((short)2, "queuesgid"),
    GRPID((short)3, "grpid"),
    SVRID((short)4, "svrid"),
    SERVNAME((short)5, "servname");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SGID
          return SGID;
        case 2: // QUEUESGID
          return QUEUESGID;
        case 3: // GRPID
          return GRPID;
        case 4: // SVRID
          return SVRID;
        case 5: // SERVNAME
          return SERVNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SGID_ISSET_ID = 0;
  private static final int __QUEUESGID_ISSET_ID = 1;
  private static final int __GRPID_ISSET_ID = 2;
  private static final int __SVRID_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SGID, new org.apache.thrift.meta_data.FieldMetaData("sgid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUEUESGID, new org.apache.thrift.meta_data.FieldMetaData("queuesgid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GRPID, new org.apache.thrift.meta_data.FieldMetaData("grpid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SVRID, new org.apache.thrift.meta_data.FieldMetaData("svrid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVNAME, new org.apache.thrift.meta_data.FieldMetaData("servname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerInfo.class, metaDataMap);
  }

  public ServerInfo() {
  }

  public ServerInfo(
    long sgid,
    long queuesgid,
    int grpid,
    int svrid,
    String servname)
  {
    this();
    this.sgid = sgid;
    setSgidIsSet(true);
    this.queuesgid = queuesgid;
    setQueuesgidIsSet(true);
    this.grpid = grpid;
    setGrpidIsSet(true);
    this.svrid = svrid;
    setSvridIsSet(true);
    this.servname = servname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerInfo(ServerInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.sgid = other.sgid;
    this.queuesgid = other.queuesgid;
    this.grpid = other.grpid;
    this.svrid = other.svrid;
    if (other.isSetServname()) {
      this.servname = other.servname;
    }
  }

  public ServerInfo deepCopy() {
    return new ServerInfo(this);
  }

  @Override
  public void clear() {
    setSgidIsSet(false);
    this.sgid = 0;
    setQueuesgidIsSet(false);
    this.queuesgid = 0;
    setGrpidIsSet(false);
    this.grpid = 0;
    setSvridIsSet(false);
    this.svrid = 0;
    this.servname = null;
  }

  public long getSgid() {
    return this.sgid;
  }

  public ServerInfo setSgid(long sgid) {
    this.sgid = sgid;
    setSgidIsSet(true);
    return this;
  }

  public void unsetSgid() {
    __isset_bit_vector.clear(__SGID_ISSET_ID);
  }

  /** Returns true if field sgid is set (has been assigned a value) and false otherwise */
  public boolean isSetSgid() {
    return __isset_bit_vector.get(__SGID_ISSET_ID);
  }

  public void setSgidIsSet(boolean value) {
    __isset_bit_vector.set(__SGID_ISSET_ID, value);
  }

  public long getQueuesgid() {
    return this.queuesgid;
  }

  public ServerInfo setQueuesgid(long queuesgid) {
    this.queuesgid = queuesgid;
    setQueuesgidIsSet(true);
    return this;
  }

  public void unsetQueuesgid() {
    __isset_bit_vector.clear(__QUEUESGID_ISSET_ID);
  }

  /** Returns true if field queuesgid is set (has been assigned a value) and false otherwise */
  public boolean isSetQueuesgid() {
    return __isset_bit_vector.get(__QUEUESGID_ISSET_ID);
  }

  public void setQueuesgidIsSet(boolean value) {
    __isset_bit_vector.set(__QUEUESGID_ISSET_ID, value);
  }

  public int getGrpid() {
    return this.grpid;
  }

  public ServerInfo setGrpid(int grpid) {
    this.grpid = grpid;
    setGrpidIsSet(true);
    return this;
  }

  public void unsetGrpid() {
    __isset_bit_vector.clear(__GRPID_ISSET_ID);
  }

  /** Returns true if field grpid is set (has been assigned a value) and false otherwise */
  public boolean isSetGrpid() {
    return __isset_bit_vector.get(__GRPID_ISSET_ID);
  }

  public void setGrpidIsSet(boolean value) {
    __isset_bit_vector.set(__GRPID_ISSET_ID, value);
  }

  public int getSvrid() {
    return this.svrid;
  }

  public ServerInfo setSvrid(int svrid) {
    this.svrid = svrid;
    setSvridIsSet(true);
    return this;
  }

  public void unsetSvrid() {
    __isset_bit_vector.clear(__SVRID_ISSET_ID);
  }

  /** Returns true if field svrid is set (has been assigned a value) and false otherwise */
  public boolean isSetSvrid() {
    return __isset_bit_vector.get(__SVRID_ISSET_ID);
  }

  public void setSvridIsSet(boolean value) {
    __isset_bit_vector.set(__SVRID_ISSET_ID, value);
  }

  public String getServname() {
    return this.servname;
  }

  public ServerInfo setServname(String servname) {
    this.servname = servname;
    return this;
  }

  public void unsetServname() {
    this.servname = null;
  }

  /** Returns true if field servname is set (has been assigned a value) and false otherwise */
  public boolean isSetServname() {
    return this.servname != null;
  }

  public void setServnameIsSet(boolean value) {
    if (!value) {
      this.servname = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SGID:
      if (value == null) {
        unsetSgid();
      } else {
        setSgid((Long)value);
      }
      break;

    case QUEUESGID:
      if (value == null) {
        unsetQueuesgid();
      } else {
        setQueuesgid((Long)value);
      }
      break;

    case GRPID:
      if (value == null) {
        unsetGrpid();
      } else {
        setGrpid((Integer)value);
      }
      break;

    case SVRID:
      if (value == null) {
        unsetSvrid();
      } else {
        setSvrid((Integer)value);
      }
      break;

    case SERVNAME:
      if (value == null) {
        unsetServname();
      } else {
        setServname((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SGID:
      return Long.valueOf(getSgid());

    case QUEUESGID:
      return Long.valueOf(getQueuesgid());

    case GRPID:
      return Integer.valueOf(getGrpid());

    case SVRID:
      return Integer.valueOf(getSvrid());

    case SERVNAME:
      return getServname();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SGID:
      return isSetSgid();
    case QUEUESGID:
      return isSetQueuesgid();
    case GRPID:
      return isSetGrpid();
    case SVRID:
      return isSetSvrid();
    case SERVNAME:
      return isSetServname();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerInfo)
      return this.equals((ServerInfo)that);
    return false;
  }

  public boolean equals(ServerInfo that) {
    if (that == null)
      return false;

    boolean this_present_sgid = true;
    boolean that_present_sgid = true;
    if (this_present_sgid || that_present_sgid) {
      if (!(this_present_sgid && that_present_sgid))
        return false;
      if (this.sgid != that.sgid)
        return false;
    }

    boolean this_present_queuesgid = true;
    boolean that_present_queuesgid = true;
    if (this_present_queuesgid || that_present_queuesgid) {
      if (!(this_present_queuesgid && that_present_queuesgid))
        return false;
      if (this.queuesgid != that.queuesgid)
        return false;
    }

    boolean this_present_grpid = true;
    boolean that_present_grpid = true;
    if (this_present_grpid || that_present_grpid) {
      if (!(this_present_grpid && that_present_grpid))
        return false;
      if (this.grpid != that.grpid)
        return false;
    }

    boolean this_present_svrid = true;
    boolean that_present_svrid = true;
    if (this_present_svrid || that_present_svrid) {
      if (!(this_present_svrid && that_present_svrid))
        return false;
      if (this.svrid != that.svrid)
        return false;
    }

    boolean this_present_servname = true && this.isSetServname();
    boolean that_present_servname = true && that.isSetServname();
    if (this_present_servname || that_present_servname) {
      if (!(this_present_servname && that_present_servname))
        return false;
      if (!this.servname.equals(that.servname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServerInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServerInfo typedOther = (ServerInfo)other;

    lastComparison = Boolean.valueOf(isSetSgid()).compareTo(typedOther.isSetSgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgid, typedOther.sgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueuesgid()).compareTo(typedOther.isSetQueuesgid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueuesgid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queuesgid, typedOther.queuesgid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrpid()).compareTo(typedOther.isSetGrpid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrpid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grpid, typedOther.grpid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSvrid()).compareTo(typedOther.isSetSvrid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSvrid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svrid, typedOther.svrid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServname()).compareTo(typedOther.isSetServname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.servname, typedOther.servname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServerInfo(");
    boolean first = true;

    sb.append("sgid:");
    sb.append(this.sgid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queuesgid:");
    sb.append(this.queuesgid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("grpid:");
    sb.append(this.grpid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("svrid:");
    sb.append(this.svrid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("servname:");
    if (this.servname == null) {
      sb.append("null");
    } else {
      sb.append(this.servname);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerInfoStandardSchemeFactory implements SchemeFactory {
    public ServerInfoStandardScheme getScheme() {
      return new ServerInfoStandardScheme();
    }
  }

  private static class ServerInfoStandardScheme extends StandardScheme<ServerInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sgid = iprot.readI64();
              struct.setSgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUEUESGID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queuesgid = iprot.readI64();
              struct.setQueuesgidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GRPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grpid = iprot.readI32();
              struct.setGrpidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SVRID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.svrid = iprot.readI32();
              struct.setSvridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.servname = iprot.readString();
              struct.setServnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SGID_FIELD_DESC);
      oprot.writeI64(struct.sgid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUESGID_FIELD_DESC);
      oprot.writeI64(struct.queuesgid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GRPID_FIELD_DESC);
      oprot.writeI32(struct.grpid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SVRID_FIELD_DESC);
      oprot.writeI32(struct.svrid);
      oprot.writeFieldEnd();
      if (struct.servname != null) {
        oprot.writeFieldBegin(SERVNAME_FIELD_DESC);
        oprot.writeString(struct.servname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerInfoTupleSchemeFactory implements SchemeFactory {
    public ServerInfoTupleScheme getScheme() {
      return new ServerInfoTupleScheme();
    }
  }

  private static class ServerInfoTupleScheme extends TupleScheme<ServerInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSgid()) {
        optionals.set(0);
      }
      if (struct.isSetQueuesgid()) {
        optionals.set(1);
      }
      if (struct.isSetGrpid()) {
        optionals.set(2);
      }
      if (struct.isSetSvrid()) {
        optionals.set(3);
      }
      if (struct.isSetServname()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSgid()) {
        oprot.writeI64(struct.sgid);
      }
      if (struct.isSetQueuesgid()) {
        oprot.writeI64(struct.queuesgid);
      }
      if (struct.isSetGrpid()) {
        oprot.writeI32(struct.grpid);
      }
      if (struct.isSetSvrid()) {
        oprot.writeI32(struct.svrid);
      }
      if (struct.isSetServname()) {
        oprot.writeString(struct.servname);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sgid = iprot.readI64();
        struct.setSgidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queuesgid = iprot.readI64();
        struct.setQueuesgidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.grpid = iprot.readI32();
        struct.setGrpidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.svrid = iprot.readI32();
        struct.setSvridIsSet(true);
      }
      if (incoming.get(4)) {
        struct.servname = iprot.readString();
        struct.setServnameIsSet(true);
      }
    }
  }

}

