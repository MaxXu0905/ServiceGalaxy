/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ailk.monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MachineInfo implements org.apache.thrift.TBase<MachineInfo, MachineInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MachineInfo");

  private static final org.apache.thrift.protocol.TField PMID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LMID_FIELD_DESC = new org.apache.thrift.protocol.TField("lmid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SGDIR_FIELD_DESC = new org.apache.thrift.protocol.TField("sgdir", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APPDIR_FIELD_DESC = new org.apache.thrift.protocol.TField("appdir", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SGCONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sgconfig", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ENVFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("envfile", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ULOGPFX_FIELD_DESC = new org.apache.thrift.protocol.TField("ulogpfx", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MAXACCSRS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxaccsrs", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField NET_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("net_load", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField NETS_FIELD_DESC = new org.apache.thrift.protocol.TField("nets", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MachineInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MachineInfoTupleSchemeFactory());
  }

  public String pmid; // required
  public String lmid; // required
  public String sgdir; // required
  public String appdir; // required
  public String sgconfig; // required
  public String envfile; // required
  public String ulogpfx; // required
  public int mid; // required
  public int flags; // required
  public int maxaccsrs; // required
  public int perm; // required
  public int uid; // required
  public int gid; // required
  public long net_load; // required
  public List<MachineNet> nets; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PMID((short)1, "pmid"),
    LMID((short)2, "lmid"),
    SGROOT((short)3, "sgdir"),
    APPROOT((short)4, "appdir"),
    SGPROFILE((short)5, "sgconfig"),
    ENVFILE((short)6, "envfile"),
    ULOGPFX((short)7, "ulogpfx"),
    MID((short)8, "mid"),
    FLAGS((short)9, "flags"),
    MAXACCSRS((short)10, "maxaccsrs"),
    PERM((short)11, "perm"),
    UID((short)12, "uid"),
    GID((short)13, "gid"),
    NET_LOAD((short)14, "net_load"),
    NETS((short)15, "nets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PMID
          return PMID;
        case 2: // LMID
          return LMID;
        case 3: // SGROOT
          return SGROOT;
        case 4: // APPROOT
          return APPROOT;
        case 5: // SGPROFILE
          return SGPROFILE;
        case 6: // ENVFILE
          return ENVFILE;
        case 7: // ULOGPFX
          return ULOGPFX;
        case 8: // MID
          return MID;
        case 9: // FLAGS
          return FLAGS;
        case 10: // MAXACCSRS
          return MAXACCSRS;
        case 11: // PERM
          return PERM;
        case 12: // UID
          return UID;
        case 13: // GID
          return GID;
        case 14: // NET_LOAD
          return NET_LOAD;
        case 15: // NETS
          return NETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MID_ISSET_ID = 0;
  private static final int __FLAGS_ISSET_ID = 1;
  private static final int __MAXACCSRS_ISSET_ID = 2;
  private static final int __PERM_ISSET_ID = 3;
  private static final int __UID_ISSET_ID = 4;
  private static final int __GID_ISSET_ID = 5;
  private static final int __NET_LOAD_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PMID, new org.apache.thrift.meta_data.FieldMetaData("pmid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LMID, new org.apache.thrift.meta_data.FieldMetaData("lmid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SGROOT, new org.apache.thrift.meta_data.FieldMetaData("sgdir", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROOT, new org.apache.thrift.meta_data.FieldMetaData("appdir", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SGPROFILE, new org.apache.thrift.meta_data.FieldMetaData("sgconfig", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENVFILE, new org.apache.thrift.meta_data.FieldMetaData("envfile", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ULOGPFX, new org.apache.thrift.meta_data.FieldMetaData("ulogpfx", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXACCSRS, new org.apache.thrift.meta_data.FieldMetaData("maxaccsrs", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NET_LOAD, new org.apache.thrift.meta_data.FieldMetaData("net_load", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NETS, new org.apache.thrift.meta_data.FieldMetaData("nets", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MachineNet.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MachineInfo.class, metaDataMap);
  }

  public MachineInfo() {
  }

  public MachineInfo(
    String pmid,
    String lmid,
    String sgdir,
    String appdir,
    String sgconfig,
    String envfile,
    String ulogpfx,
    int mid,
    int flags,
    int maxaccsrs,
    int perm,
    int uid,
    int gid,
    long net_load,
    List<MachineNet> nets)
  {
    this();
    this.pmid = pmid;
    this.lmid = lmid;
    this.sgdir = sgdir;
    this.appdir = appdir;
    this.sgconfig = sgconfig;
    this.envfile = envfile;
    this.ulogpfx = ulogpfx;
    this.mid = mid;
    setMidIsSet(true);
    this.flags = flags;
    setFlagsIsSet(true);
    this.maxaccsrs = maxaccsrs;
    setMaxaccsrsIsSet(true);
    this.perm = perm;
    setPermIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.gid = gid;
    setGidIsSet(true);
    this.net_load = net_load;
    setNet_loadIsSet(true);
    this.nets = nets;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MachineInfo(MachineInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPmid()) {
      this.pmid = other.pmid;
    }
    if (other.isSetLmid()) {
      this.lmid = other.lmid;
    }
    if (other.isSetSgdir()) {
      this.sgdir = other.sgdir;
    }
    if (other.isSetAppdir()) {
      this.appdir = other.appdir;
    }
    if (other.isSetSgconfig()) {
      this.sgconfig = other.sgconfig;
    }
    if (other.isSetEnvfile()) {
      this.envfile = other.envfile;
    }
    if (other.isSetUlogpfx()) {
      this.ulogpfx = other.ulogpfx;
    }
    this.mid = other.mid;
    this.flags = other.flags;
    this.maxaccsrs = other.maxaccsrs;
    this.perm = other.perm;
    this.uid = other.uid;
    this.gid = other.gid;
    this.net_load = other.net_load;
    if (other.isSetNets()) {
      List<MachineNet> __this__nets = new ArrayList<MachineNet>();
      for (MachineNet other_element : other.nets) {
        __this__nets.add(new MachineNet(other_element));
      }
      this.nets = __this__nets;
    }
  }

  public MachineInfo deepCopy() {
    return new MachineInfo(this);
  }

  @Override
  public void clear() {
    this.pmid = null;
    this.lmid = null;
    this.sgdir = null;
    this.appdir = null;
    this.sgconfig = null;
    this.envfile = null;
    this.ulogpfx = null;
    setMidIsSet(false);
    this.mid = 0;
    setFlagsIsSet(false);
    this.flags = 0;
    setMaxaccsrsIsSet(false);
    this.maxaccsrs = 0;
    setPermIsSet(false);
    this.perm = 0;
    setUidIsSet(false);
    this.uid = 0;
    setGidIsSet(false);
    this.gid = 0;
    setNet_loadIsSet(false);
    this.net_load = 0;
    this.nets = null;
  }

  public String getPmid() {
    return this.pmid;
  }

  public MachineInfo setPmid(String pmid) {
    this.pmid = pmid;
    return this;
  }

  public void unsetPmid() {
    this.pmid = null;
  }

  /** Returns true if field pmid is set (has been assigned a value) and false otherwise */
  public boolean isSetPmid() {
    return this.pmid != null;
  }

  public void setPmidIsSet(boolean value) {
    if (!value) {
      this.pmid = null;
    }
  }

  public String getLmid() {
    return this.lmid;
  }

  public MachineInfo setLmid(String lmid) {
    this.lmid = lmid;
    return this;
  }

  public void unsetLmid() {
    this.lmid = null;
  }

  /** Returns true if field lmid is set (has been assigned a value) and false otherwise */
  public boolean isSetLmid() {
    return this.lmid != null;
  }

  public void setLmidIsSet(boolean value) {
    if (!value) {
      this.lmid = null;
    }
  }

  public String getSgdir() {
    return this.sgdir;
  }

  public MachineInfo setSgdir(String sgdir) {
    this.sgdir = sgdir;
    return this;
  }

  public void unsetSgdir() {
    this.sgdir = null;
  }

  /** Returns true if field sgdir is set (has been assigned a value) and false otherwise */
  public boolean isSetSgdir() {
    return this.sgdir != null;
  }

  public void setSgdirIsSet(boolean value) {
    if (!value) {
      this.sgdir = null;
    }
  }

  public String getAppdir() {
    return this.appdir;
  }

  public MachineInfo setAppdir(String appdir) {
    this.appdir = appdir;
    return this;
  }

  public void unsetAppdir() {
    this.appdir = null;
  }

  /** Returns true if field appdir is set (has been assigned a value) and false otherwise */
  public boolean isSetAppdir() {
    return this.appdir != null;
  }

  public void setAppdirIsSet(boolean value) {
    if (!value) {
      this.appdir = null;
    }
  }

  public String getSgconfig() {
    return this.sgconfig;
  }

  public MachineInfo setSgconfig(String sgconfig) {
    this.sgconfig = sgconfig;
    return this;
  }

  public void unsetSgconfig() {
    this.sgconfig = null;
  }

  /** Returns true if field sgconfig is set (has been assigned a value) and false otherwise */
  public boolean isSetSgconfig() {
    return this.sgconfig != null;
  }

  public void setSgconfigIsSet(boolean value) {
    if (!value) {
      this.sgconfig = null;
    }
  }

  public String getEnvfile() {
    return this.envfile;
  }

  public MachineInfo setEnvfile(String envfile) {
    this.envfile = envfile;
    return this;
  }

  public void unsetEnvfile() {
    this.envfile = null;
  }

  /** Returns true if field envfile is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvfile() {
    return this.envfile != null;
  }

  public void setEnvfileIsSet(boolean value) {
    if (!value) {
      this.envfile = null;
    }
  }

  public String getUlogpfx() {
    return this.ulogpfx;
  }

  public MachineInfo setUlogpfx(String ulogpfx) {
    this.ulogpfx = ulogpfx;
    return this;
  }

  public void unsetUlogpfx() {
    this.ulogpfx = null;
  }

  /** Returns true if field ulogpfx is set (has been assigned a value) and false otherwise */
  public boolean isSetUlogpfx() {
    return this.ulogpfx != null;
  }

  public void setUlogpfxIsSet(boolean value) {
    if (!value) {
      this.ulogpfx = null;
    }
  }

  public int getMid() {
    return this.mid;
  }

  public MachineInfo setMid(int mid) {
    this.mid = mid;
    setMidIsSet(true);
    return this;
  }

  public void unsetMid() {
    __isset_bit_vector.clear(__MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return __isset_bit_vector.get(__MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bit_vector.set(__MID_ISSET_ID, value);
  }

  public int getFlags() {
    return this.flags;
  }

  public MachineInfo setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bit_vector.clear(__FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return __isset_bit_vector.get(__FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bit_vector.set(__FLAGS_ISSET_ID, value);
  }

  public int getMaxaccsrs() {
    return this.maxaccsrs;
  }

  public MachineInfo setMaxaccsrs(int maxaccsrs) {
    this.maxaccsrs = maxaccsrs;
    setMaxaccsrsIsSet(true);
    return this;
  }

  public void unsetMaxaccsrs() {
    __isset_bit_vector.clear(__MAXACCSRS_ISSET_ID);
  }

  /** Returns true if field maxaccsrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxaccsrs() {
    return __isset_bit_vector.get(__MAXACCSRS_ISSET_ID);
  }

  public void setMaxaccsrsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXACCSRS_ISSET_ID, value);
  }

  public int getPerm() {
    return this.perm;
  }

  public MachineInfo setPerm(int perm) {
    this.perm = perm;
    setPermIsSet(true);
    return this;
  }

  public void unsetPerm() {
    __isset_bit_vector.clear(__PERM_ISSET_ID);
  }

  /** Returns true if field perm is set (has been assigned a value) and false otherwise */
  public boolean isSetPerm() {
    return __isset_bit_vector.get(__PERM_ISSET_ID);
  }

  public void setPermIsSet(boolean value) {
    __isset_bit_vector.set(__PERM_ISSET_ID, value);
  }

  public int getUid() {
    return this.uid;
  }

  public MachineInfo setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bit_vector.clear(__UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return __isset_bit_vector.get(__UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bit_vector.set(__UID_ISSET_ID, value);
  }

  public int getGid() {
    return this.gid;
  }

  public MachineInfo setGid(int gid) {
    this.gid = gid;
    setGidIsSet(true);
    return this;
  }

  public void unsetGid() {
    __isset_bit_vector.clear(__GID_ISSET_ID);
  }

  /** Returns true if field gid is set (has been assigned a value) and false otherwise */
  public boolean isSetGid() {
    return __isset_bit_vector.get(__GID_ISSET_ID);
  }

  public void setGidIsSet(boolean value) {
    __isset_bit_vector.set(__GID_ISSET_ID, value);
  }

  public long getNet_load() {
    return this.net_load;
  }

  public MachineInfo setNet_load(long net_load) {
    this.net_load = net_load;
    setNet_loadIsSet(true);
    return this;
  }

  public void unsetNet_load() {
    __isset_bit_vector.clear(__NET_LOAD_ISSET_ID);
  }

  /** Returns true if field net_load is set (has been assigned a value) and false otherwise */
  public boolean isSetNet_load() {
    return __isset_bit_vector.get(__NET_LOAD_ISSET_ID);
  }

  public void setNet_loadIsSet(boolean value) {
    __isset_bit_vector.set(__NET_LOAD_ISSET_ID, value);
  }

  public int getNetsSize() {
    return (this.nets == null) ? 0 : this.nets.size();
  }

  public java.util.Iterator<MachineNet> getNetsIterator() {
    return (this.nets == null) ? null : this.nets.iterator();
  }

  public void addToNets(MachineNet elem) {
    if (this.nets == null) {
      this.nets = new ArrayList<MachineNet>();
    }
    this.nets.add(elem);
  }

  public List<MachineNet> getNets() {
    return this.nets;
  }

  public MachineInfo setNets(List<MachineNet> nets) {
    this.nets = nets;
    return this;
  }

  public void unsetNets() {
    this.nets = null;
  }

  /** Returns true if field nets is set (has been assigned a value) and false otherwise */
  public boolean isSetNets() {
    return this.nets != null;
  }

  public void setNetsIsSet(boolean value) {
    if (!value) {
      this.nets = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PMID:
      if (value == null) {
        unsetPmid();
      } else {
        setPmid((String)value);
      }
      break;

    case LMID:
      if (value == null) {
        unsetLmid();
      } else {
        setLmid((String)value);
      }
      break;

    case SGROOT:
      if (value == null) {
        unsetSgdir();
      } else {
        setSgdir((String)value);
      }
      break;

    case APPROOT:
      if (value == null) {
        unsetAppdir();
      } else {
        setAppdir((String)value);
      }
      break;

    case SGPROFILE:
      if (value == null) {
        unsetSgconfig();
      } else {
        setSgconfig((String)value);
      }
      break;

    case ENVFILE:
      if (value == null) {
        unsetEnvfile();
      } else {
        setEnvfile((String)value);
      }
      break;

    case ULOGPFX:
      if (value == null) {
        unsetUlogpfx();
      } else {
        setUlogpfx((String)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((Integer)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((Integer)value);
      }
      break;

    case MAXACCSRS:
      if (value == null) {
        unsetMaxaccsrs();
      } else {
        setMaxaccsrs((Integer)value);
      }
      break;

    case PERM:
      if (value == null) {
        unsetPerm();
      } else {
        setPerm((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case GID:
      if (value == null) {
        unsetGid();
      } else {
        setGid((Integer)value);
      }
      break;

    case NET_LOAD:
      if (value == null) {
        unsetNet_load();
      } else {
        setNet_load((Long)value);
      }
      break;

    case NETS:
      if (value == null) {
        unsetNets();
      } else {
        setNets((List<MachineNet>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PMID:
      return getPmid();

    case LMID:
      return getLmid();

    case SGROOT:
      return getSgdir();

    case APPROOT:
      return getAppdir();

    case SGPROFILE:
      return getSgconfig();

    case ENVFILE:
      return getEnvfile();

    case ULOGPFX:
      return getUlogpfx();

    case MID:
      return Integer.valueOf(getMid());

    case FLAGS:
      return Integer.valueOf(getFlags());

    case MAXACCSRS:
      return Integer.valueOf(getMaxaccsrs());

    case PERM:
      return Integer.valueOf(getPerm());

    case UID:
      return Integer.valueOf(getUid());

    case GID:
      return Integer.valueOf(getGid());

    case NET_LOAD:
      return Long.valueOf(getNet_load());

    case NETS:
      return getNets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PMID:
      return isSetPmid();
    case LMID:
      return isSetLmid();
    case SGROOT:
      return isSetSgdir();
    case APPROOT:
      return isSetAppdir();
    case SGPROFILE:
      return isSetSgconfig();
    case ENVFILE:
      return isSetEnvfile();
    case ULOGPFX:
      return isSetUlogpfx();
    case MID:
      return isSetMid();
    case FLAGS:
      return isSetFlags();
    case MAXACCSRS:
      return isSetMaxaccsrs();
    case PERM:
      return isSetPerm();
    case UID:
      return isSetUid();
    case GID:
      return isSetGid();
    case NET_LOAD:
      return isSetNet_load();
    case NETS:
      return isSetNets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MachineInfo)
      return this.equals((MachineInfo)that);
    return false;
  }

  public boolean equals(MachineInfo that) {
    if (that == null)
      return false;

    boolean this_present_pmid = true && this.isSetPmid();
    boolean that_present_pmid = true && that.isSetPmid();
    if (this_present_pmid || that_present_pmid) {
      if (!(this_present_pmid && that_present_pmid))
        return false;
      if (!this.pmid.equals(that.pmid))
        return false;
    }

    boolean this_present_lmid = true && this.isSetLmid();
    boolean that_present_lmid = true && that.isSetLmid();
    if (this_present_lmid || that_present_lmid) {
      if (!(this_present_lmid && that_present_lmid))
        return false;
      if (!this.lmid.equals(that.lmid))
        return false;
    }

    boolean this_present_sgdir = true && this.isSetSgdir();
    boolean that_present_sgdir = true && that.isSetSgdir();
    if (this_present_sgdir || that_present_sgdir) {
      if (!(this_present_sgdir && that_present_sgdir))
        return false;
      if (!this.sgdir.equals(that.sgdir))
        return false;
    }

    boolean this_present_appdir = true && this.isSetAppdir();
    boolean that_present_appdir = true && that.isSetAppdir();
    if (this_present_appdir || that_present_appdir) {
      if (!(this_present_appdir && that_present_appdir))
        return false;
      if (!this.appdir.equals(that.appdir))
        return false;
    }

    boolean this_present_sgconfig = true && this.isSetSgconfig();
    boolean that_present_sgconfig = true && that.isSetSgconfig();
    if (this_present_sgconfig || that_present_sgconfig) {
      if (!(this_present_sgconfig && that_present_sgconfig))
        return false;
      if (!this.sgconfig.equals(that.sgconfig))
        return false;
    }

    boolean this_present_envfile = true && this.isSetEnvfile();
    boolean that_present_envfile = true && that.isSetEnvfile();
    if (this_present_envfile || that_present_envfile) {
      if (!(this_present_envfile && that_present_envfile))
        return false;
      if (!this.envfile.equals(that.envfile))
        return false;
    }

    boolean this_present_ulogpfx = true && this.isSetUlogpfx();
    boolean that_present_ulogpfx = true && that.isSetUlogpfx();
    if (this_present_ulogpfx || that_present_ulogpfx) {
      if (!(this_present_ulogpfx && that_present_ulogpfx))
        return false;
      if (!this.ulogpfx.equals(that.ulogpfx))
        return false;
    }

    boolean this_present_mid = true;
    boolean that_present_mid = true;
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    boolean this_present_maxaccsrs = true;
    boolean that_present_maxaccsrs = true;
    if (this_present_maxaccsrs || that_present_maxaccsrs) {
      if (!(this_present_maxaccsrs && that_present_maxaccsrs))
        return false;
      if (this.maxaccsrs != that.maxaccsrs)
        return false;
    }

    boolean this_present_perm = true;
    boolean that_present_perm = true;
    if (this_present_perm || that_present_perm) {
      if (!(this_present_perm && that_present_perm))
        return false;
      if (this.perm != that.perm)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_gid = true;
    boolean that_present_gid = true;
    if (this_present_gid || that_present_gid) {
      if (!(this_present_gid && that_present_gid))
        return false;
      if (this.gid != that.gid)
        return false;
    }

    boolean this_present_net_load = true;
    boolean that_present_net_load = true;
    if (this_present_net_load || that_present_net_load) {
      if (!(this_present_net_load && that_present_net_load))
        return false;
      if (this.net_load != that.net_load)
        return false;
    }

    boolean this_present_nets = true && this.isSetNets();
    boolean that_present_nets = true && that.isSetNets();
    if (this_present_nets || that_present_nets) {
      if (!(this_present_nets && that_present_nets))
        return false;
      if (!this.nets.equals(that.nets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MachineInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MachineInfo typedOther = (MachineInfo)other;

    lastComparison = Boolean.valueOf(isSetPmid()).compareTo(typedOther.isSetPmid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmid, typedOther.pmid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLmid()).compareTo(typedOther.isSetLmid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLmid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lmid, typedOther.lmid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSgdir()).compareTo(typedOther.isSetSgdir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgdir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgdir, typedOther.sgdir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppdir()).compareTo(typedOther.isSetAppdir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppdir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appdir, typedOther.appdir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSgconfig()).compareTo(typedOther.isSetSgconfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgconfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgconfig, typedOther.sgconfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvfile()).compareTo(typedOther.isSetEnvfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envfile, typedOther.envfile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUlogpfx()).compareTo(typedOther.isSetUlogpfx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlogpfx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulogpfx, typedOther.ulogpfx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMid()).compareTo(typedOther.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, typedOther.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxaccsrs()).compareTo(typedOther.isSetMaxaccsrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxaccsrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxaccsrs, typedOther.maxaccsrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerm()).compareTo(typedOther.isSetPerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, typedOther.perm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGid()).compareTo(typedOther.isSetGid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, typedOther.gid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNet_load()).compareTo(typedOther.isSetNet_load());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNet_load()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.net_load, typedOther.net_load);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNets()).compareTo(typedOther.isSetNets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nets, typedOther.nets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MachineInfo(");
    boolean first = true;

    sb.append("pmid:");
    if (this.pmid == null) {
      sb.append("null");
    } else {
      sb.append(this.pmid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lmid:");
    if (this.lmid == null) {
      sb.append("null");
    } else {
      sb.append(this.lmid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sgdir:");
    if (this.sgdir == null) {
      sb.append("null");
    } else {
      sb.append(this.sgdir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appdir:");
    if (this.appdir == null) {
      sb.append("null");
    } else {
      sb.append(this.appdir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sgconfig:");
    if (this.sgconfig == null) {
      sb.append("null");
    } else {
      sb.append(this.sgconfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("envfile:");
    if (this.envfile == null) {
      sb.append("null");
    } else {
      sb.append(this.envfile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulogpfx:");
    if (this.ulogpfx == null) {
      sb.append("null");
    } else {
      sb.append(this.ulogpfx);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mid:");
    sb.append(this.mid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxaccsrs:");
    sb.append(this.maxaccsrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perm:");
    sb.append(this.perm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gid:");
    sb.append(this.gid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("net_load:");
    sb.append(this.net_load);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nets:");
    if (this.nets == null) {
      sb.append("null");
    } else {
      sb.append(this.nets);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MachineInfoStandardSchemeFactory implements SchemeFactory {
    public MachineInfoStandardScheme getScheme() {
      return new MachineInfoStandardScheme();
    }
  }

  private static class MachineInfoStandardScheme extends StandardScheme<MachineInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MachineInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // PMID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmid = iprot.readString();
              struct.setPmidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LMID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lmid = iprot.readString();
              struct.setLmidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SGROOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sgdir = iprot.readString();
              struct.setSgdirIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPROOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appdir = iprot.readString();
              struct.setAppdirIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SGPROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sgconfig = iprot.readString();
              struct.setSgconfigIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENVFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.envfile = iprot.readString();
              struct.setEnvfileIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ULOGPFX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ulogpfx = iprot.readString();
              struct.setUlogpfxIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mid = iprot.readI32();
              struct.setMidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flags = iprot.readI32();
              struct.setFlagsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAXACCSRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxaccsrs = iprot.readI32();
              struct.setMaxaccsrsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perm = iprot.readI32();
              struct.setPermIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gid = iprot.readI32();
              struct.setGidIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NET_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.net_load = iprot.readI64();
              struct.setNet_loadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.nets = new ArrayList<MachineNet>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  MachineNet _elem2; // required
                  _elem2 = new MachineNet();
                  _elem2.read(iprot);
                  struct.nets.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setNetsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MachineInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pmid != null) {
        oprot.writeFieldBegin(PMID_FIELD_DESC);
        oprot.writeString(struct.pmid);
        oprot.writeFieldEnd();
      }
      if (struct.lmid != null) {
        oprot.writeFieldBegin(LMID_FIELD_DESC);
        oprot.writeString(struct.lmid);
        oprot.writeFieldEnd();
      }
      if (struct.sgdir != null) {
        oprot.writeFieldBegin(SGDIR_FIELD_DESC);
        oprot.writeString(struct.sgdir);
        oprot.writeFieldEnd();
      }
      if (struct.appdir != null) {
        oprot.writeFieldBegin(APPDIR_FIELD_DESC);
        oprot.writeString(struct.appdir);
        oprot.writeFieldEnd();
      }
      if (struct.sgconfig != null) {
        oprot.writeFieldBegin(SGCONFIG_FIELD_DESC);
        oprot.writeString(struct.sgconfig);
        oprot.writeFieldEnd();
      }
      if (struct.envfile != null) {
        oprot.writeFieldBegin(ENVFILE_FIELD_DESC);
        oprot.writeString(struct.envfile);
        oprot.writeFieldEnd();
      }
      if (struct.ulogpfx != null) {
        oprot.writeFieldBegin(ULOGPFX_FIELD_DESC);
        oprot.writeString(struct.ulogpfx);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeI32(struct.mid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(struct.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAXACCSRS_FIELD_DESC);
      oprot.writeI32(struct.maxaccsrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERM_FIELD_DESC);
      oprot.writeI32(struct.perm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GID_FIELD_DESC);
      oprot.writeI32(struct.gid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NET_LOAD_FIELD_DESC);
      oprot.writeI64(struct.net_load);
      oprot.writeFieldEnd();
      if (struct.nets != null) {
        oprot.writeFieldBegin(NETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nets.size()));
          for (MachineNet _iter3 : struct.nets)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MachineInfoTupleSchemeFactory implements SchemeFactory {
    public MachineInfoTupleScheme getScheme() {
      return new MachineInfoTupleScheme();
    }
  }

  private static class MachineInfoTupleScheme extends TupleScheme<MachineInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MachineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPmid()) {
        optionals.set(0);
      }
      if (struct.isSetLmid()) {
        optionals.set(1);
      }
      if (struct.isSetSgdir()) {
        optionals.set(2);
      }
      if (struct.isSetAppdir()) {
        optionals.set(3);
      }
      if (struct.isSetSgconfig()) {
        optionals.set(4);
      }
      if (struct.isSetEnvfile()) {
        optionals.set(5);
      }
      if (struct.isSetUlogpfx()) {
        optionals.set(6);
      }
      if (struct.isSetMid()) {
        optionals.set(7);
      }
      if (struct.isSetFlags()) {
        optionals.set(8);
      }
      if (struct.isSetMaxaccsrs()) {
        optionals.set(9);
      }
      if (struct.isSetPerm()) {
        optionals.set(10);
      }
      if (struct.isSetUid()) {
        optionals.set(11);
      }
      if (struct.isSetGid()) {
        optionals.set(12);
      }
      if (struct.isSetNet_load()) {
        optionals.set(13);
      }
      if (struct.isSetNets()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetPmid()) {
        oprot.writeString(struct.pmid);
      }
      if (struct.isSetLmid()) {
        oprot.writeString(struct.lmid);
      }
      if (struct.isSetSgdir()) {
        oprot.writeString(struct.sgdir);
      }
      if (struct.isSetAppdir()) {
        oprot.writeString(struct.appdir);
      }
      if (struct.isSetSgconfig()) {
        oprot.writeString(struct.sgconfig);
      }
      if (struct.isSetEnvfile()) {
        oprot.writeString(struct.envfile);
      }
      if (struct.isSetUlogpfx()) {
        oprot.writeString(struct.ulogpfx);
      }
      if (struct.isSetMid()) {
        oprot.writeI32(struct.mid);
      }
      if (struct.isSetFlags()) {
        oprot.writeI32(struct.flags);
      }
      if (struct.isSetMaxaccsrs()) {
        oprot.writeI32(struct.maxaccsrs);
      }
      if (struct.isSetPerm()) {
        oprot.writeI32(struct.perm);
      }
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetGid()) {
        oprot.writeI32(struct.gid);
      }
      if (struct.isSetNet_load()) {
        oprot.writeI64(struct.net_load);
      }
      if (struct.isSetNets()) {
        {
          oprot.writeI32(struct.nets.size());
          for (MachineNet _iter4 : struct.nets)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MachineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.pmid = iprot.readString();
        struct.setPmidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lmid = iprot.readString();
        struct.setLmidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sgdir = iprot.readString();
        struct.setSgdirIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appdir = iprot.readString();
        struct.setAppdirIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sgconfig = iprot.readString();
        struct.setSgconfigIsSet(true);
      }
      if (incoming.get(5)) {
        struct.envfile = iprot.readString();
        struct.setEnvfileIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ulogpfx = iprot.readString();
        struct.setUlogpfxIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mid = iprot.readI32();
        struct.setMidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.flags = iprot.readI32();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.maxaccsrs = iprot.readI32();
        struct.setMaxaccsrsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.perm = iprot.readI32();
        struct.setPermIsSet(true);
      }
      if (incoming.get(11)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.gid = iprot.readI32();
        struct.setGidIsSet(true);
      }
      if (incoming.get(13)) {
        struct.net_load = iprot.readI64();
        struct.setNet_loadIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nets = new ArrayList<MachineNet>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            MachineNet _elem7; // required
            _elem7 = new MachineNet();
            _elem7.read(iprot);
            struct.nets.add(_elem7);
          }
        }
        struct.setNetsIsSet(true);
      }
    }
  }

}

